task_id,text,test_list,input,true_label,prediction
11,Write a python function to remove first and last occurrence of a given character from the string.,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","Write a python function to remove first and last occurrence of a given character from the string. Your code should satisfy these tests:
 assert remove_Occ(""hello"",""l"") == ""heo""
 assert remove_Occ(""abcda"",""a"") == ""bcd""
 assert remove_Occ(""PHP"",""P"") == ""H""","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","
""""""

def remove_Occ(str, char):
    return str[1:len(str)-1-char]
"
12,Write a function to sort a given matrix in ascending order according to the sum of its rows.,"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","Write a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy these tests:
 assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
 assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
 assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","

""""""

def sort_matrix(matrix):
    """"""
    :type matrix: List[List[int]]
    :rtype: List[List[int]]
    """"""
    if len(matrix) == 0:
        return matrix
    m = len(matrix[0])
    n"
13,Write a function to count the most common words in a dictionary.,"['assert count_common([\'red\',\'green\',\'black\',\'pink\',\'black\',\'white\',\'black\',\'eyes\',\'white\',\'black\',\'orange\',\'pink\',\'pink\',\'red\',\'red\',\'white\',\'orange\',\'white\',""black"",\'pink\',\'green\',\'green\',\'pink\',\'green\',\'pink\',\'white\',\'orange\',""orange"",\'red\']) == [(\'pink\', 6), (\'black\', 5), (\'white\', 5), (\'red\', 4)]', ""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"", ""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]""]","Write a function to count the most common words in a dictionary. Your code should satisfy these tests:
 assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
 assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
 assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]","from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","

""""""
def count_common(words):
    """"""
    :type words: List[str]
    :rtype: List[Tuple[str, int]]
    """"""
    common = {}
    for word in words:
        if word in common:
            common[word] += 1
        else:
            common[word] = 1
    return [(word, common[word]) for word in common]


def main():
    print count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white"
14,Write a python function to find the volume of a triangular prism.,"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","Write a python function to find the volume of a triangular prism. Your code should satisfy these tests:
 assert find_Volume(10,8,6) == 240
 assert find_Volume(3,2,2) == 6
 assert find_Volume(1,2,1) == 1","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","

def find_Volume(a, b, c):
    return (a * b * c) / 2
"
15,Write a function to split a string at lowercase letters.,"['assert split_lowerstring(""AbCd"")==[\'bC\',\'d\']', 'assert split_lowerstring(""Python"")==[\'y\', \'t\', \'h\', \'o\', \'n\']', 'assert split_lowerstring(""Programming"")==[\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\']']","Write a function to split a string at lowercase letters. Your code should satisfy these tests:
 assert split_lowerstring(""AbCd"")==['bC','d']
 assert split_lowerstring(""Python"")==['y', 't', 'h', 'o', 'n']
 assert split_lowerstring(""Programming"")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']","import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","

def split_lowerstring(string):
    return [string[i:i+3] for i in range(0, len(string), 3)]
"
16,Write a function to find sequences of lowercase letters joined with an underscore.,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","Write a function to find sequences of lowercase letters joined with an underscore. Your code should satisfy these tests:
 assert text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
 assert text_lowercase_underscore(""aab_Abbbc"")==('Not matched!')
 assert text_lowercase_underscore(""Aaab_abbbc"")==('Not matched!')","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","
""""""

def text_lowercase_underscore(text):
    text = text.lower()
    text = text.replace('_', '')
    text = text.replace(' ', '')
    text = text.replace('-', '')
    text = text.replace('.', '')
    text = text.replace('/', '')
    text = text.replace(':', '')
    text = text.replace(';', '')
    text = text.replace('?', '')
    text = text.replace('!', '')
    text = text.replace('\'', '')
    text = text.replace('.', '')
    text = text.replace('/', '')
    text = text.replace(':', '')
    text = text.replace(';', '')
    text = text.replace('?', '')
    text = text.replace('!', '')
    text = text.replace('\'', '')
    text = text.replace('.',"
17,Write a function to find the perimeter of a square.,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","Write a function to find the perimeter of a square. Your code should satisfy these tests:
 assert square_perimeter(10)==40
 assert square_perimeter(5)==20
 assert square_perimeter(4)==16","def square_perimeter(a):
  perimeter=4*a
  return perimeter","
""""""

def square_perimeter(n):
    return n * n
"
18,Write a function to remove characters from the first string which are present in the second string.,"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\' ']","Write a function to remove characters from the first string which are present in the second string. Your code should satisfy these tests:
 assert remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'
 assert remove_dirty_chars(""digitalindia"", ""talent"") == 'digiidi'
 assert remove_dirty_chars(""exoticmiles"", ""toxic"") == 'emles' ","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","# or 'emles'
assert remove_dirty_chars(""military"", ""military"") =='military'
""""""

def remove_dirty_chars(first_string, second_string):
    return first_string.replace(second_string, """")
"
19,Write a function to find whether a given array of integers contains any duplicate element.,"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","Write a function to find whether a given array of integers contains any duplicate element. Your code should satisfy these tests:
 assert test_duplicate(([1,2,3,4,5]))==False
 assert test_duplicate(([1,2,3,4, 4]))==True
 assert test_duplicate([1,1,2,2,3,3,4,4,5])==True","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","

""""""

def test_duplicate(nums):
    return len(set(nums))!= len(nums)
"
20,Write a function to check if the given number is woodball or not.,"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","Write a function to check if the given number is woodball or not. Your code should satisfy these tests:
 assert is_woodall(383) == True
 assert is_woodall(254) == False
 assert is_woodall(200) == False","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","

def is_woodall(n):
    if n % 4 == 0:
        return True
    else:
        return False
"
21,Write a function to find m number of multiples of n.,"['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']","Write a function to find m number of multiples of n. Your code should satisfy these tests:
 assert multiples_of_num(4,3)== [3,6,9,12]
 assert multiples_of_num(2,5)== [5,10]
 assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]","def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","
""""""

def multiples_of_num(m, n):
    return [x for x in range(1, m+1) if x % n == 0]
"
22,Write a function to find the first duplicate element in a given array of integers.,"['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']","Write a function to find the first duplicate element in a given array of integers. Your code should satisfy these tests:
 assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
 assert find_first_duplicate([1, 2, 3, 4])==-1
 assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1","def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","
""""""

def find_first_duplicate(nums):
    if len(nums) < 2:
        return -1
    if nums[0] == nums[1]:
        return nums[0]
    for i in range(1, len(nums)):
        if nums[i] == nums[i - 1]:
            return nums[i]
    return -1
"
23,Write a python function to find the maximum sum of elements of list in a list of lists.,"['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']","Write a python function to find the maximum sum of elements of list in a list of lists. Your code should satisfy these tests:
 assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
 assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6
 assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19","def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","
""""""

def maximum_Sum(list_of_lists):
    """"""
    :type list_of_lists: List[List[int]]
    :rtype: int
    """"""
    if not list_of_lists:
        return 0
    max_sum = 0
    for i in range(len(list_of_lists)):
        max_sum = max(max_sum, list_of_lists[i][0] + max(list_of_lists[i][1:]))
    return max_sum
"
24,Write a function to convert the given binary number to its decimal equivalent.,"['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']","Write a function to convert the given binary number to its decimal equivalent. Your code should satisfy these tests:
 assert binary_to_decimal(100) == 4
 assert binary_to_decimal(1011) == 11
 assert binary_to_decimal(1101101) == 109","def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","

""""""

def binary_to_decimal(n):
    return bin(n)[2:]
"
25,Write a python function to find the product of non-repeated elements in a given array.,"['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']","Write a python function to find the product of non-repeated elements in a given array. Your code should satisfy these tests:
 assert find_Product([1,1,2,3],4) == 6
 assert find_Product([1,2,3,1,1],5) == 6
 assert find_Product([1,1,4,5,6],5) == 120","def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","
""""""

def find_Product(array, n):
    product = 1
    for i in range(n):
        product *= array[i]
    return product
"
26,Write a function to check if the given tuple list has all k elements.,"['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']","Write a function to check if the given tuple list has all k elements. Your code should satisfy these tests:
 assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
 assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
 assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False","def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","
""""""

def check_k_elements(tuple_list, k):
    return len(tuple_list) == k
"
27,Write a python function to remove all digits from a list of strings.,"[""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"", ""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"", ""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']""]","Write a python function to remove all digits from a list of strings. Your code should satisfy these tests:
 assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
 assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
 assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']","import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","

""""""
def remove(a):
    return [s for s in a if s.isdigit()]


a = ['4words', '3letters', '4digits']
print remove(a)

a = ['28Jan','12Jan','11Jan']
print remove(a)

a = ['wonder1','wonder2','wonder3']
print remove(a)
""""""
"
28,Write a python function to find binomial co-efficient.,"['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3']","Write a python function to find binomial co-efficient. Your code should satisfy these tests:
 assert binomial_Coeff(5,2) == 10
 assert binomial_Coeff(4,3) == 4
 assert binomial_Coeff(3,2) == 3","def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","
 assert binomial_Coeff(2,1) == 1

def binomial_Coeff(n, k):
    if n == 1:
        return 1
    if k == 1:
        return 1
    return n * binomial_Coeff(n-1, k) / binomial_Coeff(n-k, k)
"
29,Write a python function to find the element occurring odd number of times.,"['assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1', 'assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3', 'assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5']","Write a python function to find the element occurring odd number of times. Your code should satisfy these tests:
 assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
 assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3
 assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5","def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","

def get_Odd_Occurrence(nums, n):
    odd_nums = []
    for i in range(n):
        if nums[i] % 2 == 1:
            odd_nums.append(nums[i])
    return odd_nums
"
30,Write a python function to count all the substrings starting and ending with same characters.,"['assert count_Substring_With_Equal_Ends(""abc"") == 3', 'assert count_Substring_With_Equal_Ends(""abcda"") == 6', 'assert count_Substring_With_Equal_Ends(""ab"") == 2']","Write a python function to count all the substrings starting and ending with same characters. Your code should satisfy these tests:
 assert count_Substring_With_Equal_Ends(""abc"") == 3
 assert count_Substring_With_Equal_Ends(""abcda"") == 6
 assert count_Substring_With_Equal_Ends(""ab"") == 2","def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","

def count_Substring_With_Equal_Ends(s):
    count = 0
    for i in range(len(s)):
        if s[i] == s[i-1]:
            count += 1
    return count

print(count_Substring_With_Equal_Ends(""abc""))
print(count_Substring_With_Equal_Ends(""abcda""))
print(count_Substring_With_Equal_Ends(""ab""))
"
31,Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"['assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]']","Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm. Your code should satisfy these tests:
 assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
 assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
 assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]","def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","

""""""

def func(nums, k):
    """"""
    :type nums: List[int]
    :type k: int
    :rtype: List[int]
    """"""
    if not nums:
        return []
    if len(nums) == 1:
        return [nums[0]]
    nums.sort()
    result = []
    for i in range(k):
        if nums[0] in result:
            result.remove(nums[0])
        if len(result) == 0:
            break
        if i < len(nums) - 1:
            if nums[i + 1] in result:
                result.remove(nums[i + 1])
        else:
            break
    return result
"
32,Write a python function to find the largest prime factor of a given number.,"['assert max_Prime_Factors(15) == 5', 'assert max_Prime_Factors(6) == 3', 'assert max_Prime_Factors(2) == 2']","Write a python function to find the largest prime factor of a given number. Your code should satisfy these tests:
 assert max_Prime_Factors(15) == 5
 assert max_Prime_Factors(6) == 3
 assert max_Prime_Factors(2) == 2","import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","

""""""

def max_Prime_Factors(n):
    """"""
    :type n: int
    :rtype: int
    """"""
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n % 2 == 0:
        return n
    if n % 3 == 0:
        return n
    if n % 5 == 0:
        return n
    if n % 7 == 0:
        return n
    if n % 11 == 0:
        return n
    if n % 13 == 0:
        return n
    if n % 17 == 0:
        return n
    if n % 19 == 0:
        return n
    if n % 23 == 0:
        return n
    if n % 29 == 0:
        return n
    if n % 31 == 0:
        return n
    if n % 37 == 0:
        return n
    if n % 41 == 0:
        return n
    if n % 43 == 0:
        return n
    if n % 47 == 0:
        return n
    if n % 49 == 0:
        return n
    if n % 50 == 0:
        return n
    if n % 51 == 0:
        return n
    if n % 52 == 0:
        return n
    if n % 53 == 0:
        return n"
33,Write a python function to convert a decimal number to binary number.,"['assert decimal_To_Binary(10) == 1010', 'assert decimal_To_Binary(1) == 1', 'assert decimal_To_Binary(20) == 10100']","Write a python function to convert a decimal number to binary number. Your code should satisfy these tests:
 assert decimal_To_Binary(10) == 1010
 assert decimal_To_Binary(1) == 1
 assert decimal_To_Binary(20) == 10100","def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","

# Note:
# You may assume that the input is a decimal number.
# The input will be in the range of 0 to 10^9.
# The output will be in the range of 0 to 1^8.

def decimal_To_Binary(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        return str(n) + '0' + decimal_To_Binary(n - 1)

print(decimal_To_Binary(10))
print(decimal_To_Binary(1))
print(decimal_To_Binary(20))
"
34,Write a python function to find the missing number in a sorted array.,"['assert find_missing([1,2,3,5],4) == 4', 'assert find_missing([1,3,4,5],4) == 2', 'assert find_missing([1,2,3,5,6,7],5) == 4']","Write a python function to find the missing number in a sorted array. Your code should satisfy these tests:
 assert find_missing([1,2,3,5],4) == 4
 assert find_missing([1,3,4,5],4) == 2
 assert find_missing([1,2,3,5,6,7],5) == 4","def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","

""""""
def find_missing(array, n):
    if n == 0:
        return 0
    elif n == 1:
        return array[0]
    else:
        return array[n-1] + find_missing(array, n-1)
"
35,Write a function to find the n-th rectangular number.,"['assert find_rect_num(4) == 20', 'assert find_rect_num(5) == 30', 'assert find_rect_num(6) == 42']","Write a function to find the n-th rectangular number. Your code should satisfy these tests:
 assert find_rect_num(4) == 20
 assert find_rect_num(5) == 30
 assert find_rect_num(6) == 42","def find_rect_num(n):
  return n*(n + 1) ","

def find_rect_num(n):
    if n == 1:
        return 1
    else:
        return n * find_rect_num(n - 1"
36,Write a python function to find the nth digit in the proper fraction of two given numbers.,"['assert find_Nth_Digit(1,2,1) == 5', 'assert find_Nth_Digit(3,5,1) == 6', 'assert find_Nth_Digit(5,6,5) == 3']","Write a python function to find the nth digit in the proper fraction of two given numbers. Your code should satisfy these tests:
 assert find_Nth_Digit(1,2,1) == 5
 assert find_Nth_Digit(3,5,1) == 6
 assert find_Nth_Digit(5,6,5) == 3","def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","

def find_Nth_Digit(a,b,n):
    """"""
    :type a: int
    :type b: int
    :type n: int
    :rtype: int
    """"""
    return str(a*b)[n-1]
"
37,Write a function to sort a given mixed list of integers and strings.,"[""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']""]","Write a function to sort a given mixed list of integers and strings. Your code should satisfy these tests:
 assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
 assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
 assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']","def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","

def sort_mixed_list(mixed_list):
    return sorted(mixed_list, key=lambda x: x[0])
"
38,Write a function to find the division of first even and odd number of a given list.,"['assert div_even_odd([1,3,5,7,4,1,6,8])==4', 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert div_even_odd([1,5,7,9,10])==10']","Write a function to find the division of first even and odd number of a given list. Your code should satisfy these tests:
 assert div_even_odd([1,3,5,7,4,1,6,8])==4
 assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2
 assert div_even_odd([1,5,7,9,10])==10","def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","
""""""

def div_even_odd(nums):
    if len(nums) < 2:
        return 0
    if len(nums) % 2 == 0:
        return len(nums) / 2
    else:
        return len(nums) / 2 + 1
"
39,Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"['assert rearange_string(""aab"")==(\'aba\')', 'assert rearange_string(""aabb"")==(\'abab\')', 'assert rearange_string(""abccdd"")==(\'cdabcd\')']","Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different. Your code should satisfy these tests:
 assert rearange_string(""aab"")==('aba')
 assert rearange_string(""aabb"")==('abab')
 assert rearange_string(""abccdd"")==('cdabcd')","import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","
""""""

def rearange_string(string):
    return set(string) - set(string[::2])
"
40,Write a function to find frequency of the elements in a given list of lists using collections module.,"['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']","Write a function to find frequency of the elements in a given list of lists using collections module. Your code should satisfy these tests:
 assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
 assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
 assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})","from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","

""""""

def freq_element(l):
    """"""
    :type l: List[List[int]]
    :rtype: Dict[int, int]
    """"""
    d = collections.Counter(l)
    return {k: v for k, v in d.items()}
"
41,Write a function to filter even numbers using lambda function.,"['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']","Write a function to filter even numbers using lambda function. Your code should satisfy these tests:
 assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
 assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]
 assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]","def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","

""""""

def filter_evennumbers(numbers):
    return [x for x in numbers if x % 2 == 0]
"
42,Write a python function to find the sum of repeated elements in a given array.,"['assert find_Sum([1,2,3,1,1,4,5,6],8) == 3', 'assert find_Sum([1,2,3,1,1],5) == 3', 'assert find_Sum([1,1,2],3) == 2']","Write a python function to find the sum of repeated elements in a given array. Your code should satisfy these tests:
 assert find_Sum([1,2,3,1,1,4,5,6],8) == 3
 assert find_Sum([1,2,3,1,1],5) == 3
 assert find_Sum([1,1,2],3) == 2","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","

""""""
def find_Sum(nums, n):
    if n == 0:
        return 0
    else:
        return sum(nums[:n])
"
43,Write a function to find sequences of lowercase letters joined with an underscore using regex.,"['assert text_match(""aab_cbbbc"") == \'Found a match!\'', 'assert text_match(""aab_Abbbc"") == \'Not matched!\'', 'assert text_match(""Aaab_abbbc"") == \'Not matched!\'']","Write a function to find sequences of lowercase letters joined with an underscore using regex. Your code should satisfy these tests:
 assert text_match(""aab_cbbbc"") == 'Found a match!'
 assert text_match(""aab_Abbbc"") == 'Not matched!'
 assert text_match(""Aaab_abbbc"") == 'Not matched!'","import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","
""""""

def text_match(text):
    return ""Found a match!"" if ""_"" in text else ""Not matched!""
"
44,Write a function that matches a word at the beginning of a string.,"['assert text_match_string("" python"")==(\'Not matched!\')', 'assert text_match_string(""python"")==(\'Found a match!\')', 'assert text_match_string(""  lang"")==(\'Not matched!\')']","Write a function that matches a word at the beginning of a string. Your code should satisfy these tests:
 assert text_match_string("" python"")==('Not matched!')
 assert text_match_string(""python"")==('Found a match!')
 assert text_match_string(""  lang"")==('Not matched!')","import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","

def text_match_string(text):
    return ""Not matched!"" if text.find(""python"")==-1 else ""Found a match!""
"
45,Write a function to find the gcd of the given array elements.,"['assert get_gcd([2, 4, 6, 8, 16]) == 2', 'assert get_gcd([1, 2, 3]) == 1', 'assert get_gcd([2, 4, 6, 8]) == 2 ']","Write a function to find the gcd of the given array elements. Your code should satisfy these tests:
 assert get_gcd([2, 4, 6, 8, 16]) == 2
 assert get_gcd([1, 2, 3]) == 1
 assert get_gcd([2, 4, 6, 8]) == 2 ","def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","# Your code should return 2


def get_gcd(nums):
    """"""
    :type nums: List[int]
    :rtype: int
    """"""
    if len(nums) == 0:
        return 0
    if len(nums) == 1:
        return nums[0]
    return get_gcd(nums[1:] + nums[:-1])
"
