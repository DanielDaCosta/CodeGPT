task_id,test_list,true_label,prediction,successful_test_cases,error_list
11,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""

""""""

def remove_Occ(str, ch):
    return str.replace(ch, """")

print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""o""))
print(remove_Occ(""hello"", ""h""))
print(remove_Occ(""hello"", ""e""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
12,"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","Write a function to sort a given matrix in ascending order according to the sum of its rows.
>>> Example: sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
",0,"[""Test 0 <class 'NameError'>: name 'sort_matrix' is not defined"", ""Test 1 <class 'NameError'>: name 'sort_matrix' is not defined"", ""Test 2 <class 'NameError'>: name 'sort_matrix' is not defined""]"
13,"['assert count_common([\'red\',\'green\',\'black\',\'pink\',\'black\',\'white\',\'black\',\'eyes\',\'white\',\'black\',\'orange\',\'pink\',\'pink\',\'red\',\'red\',\'white\',\'orange\',\'white\',""black"",\'pink\',\'green\',\'green\',\'pink\',\'green\',\'pink\',\'white\',\'orange\',""orange"",\'red\']) == [(\'pink\', 6), (\'black\', 5), (\'white\', 5), (\'red\', 4)]', ""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"", ""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]""]","from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","Write a function to count the most common words in a dictionary.
>>> Example: count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]

""""""

def count_common(words):
    """"""
    >>> count_common(['red','green','black','pink','black','white','black','eyes','white",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 3)""]"
14,"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","Write a python function to find the volume of a triangular prism.
>>> Example: find_Volume(10,8,6) == 240

""""""

def find_Volume(a,b,c):
    return (a*b*c)/3",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
15,"['assert split_lowerstring(""AbCd"")==[\'bC\',\'d\']', 'assert split_lowerstring(""Python"")==[\'y\', \'t\', \'h\', \'o\', \'n\']', 'assert split_lowerstring(""Programming"")==[\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\']']","import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","Write a function to split a string at lowercase letters.
>>> Example: split_lowerstring(""AbCd"")==['bC','d']
>>> Example: split_lowerstring(""abcd"")==['ab','cd']
>>> Example: split_lowerstring(""abcd"")==['ab','cd']
>>> Example: split_lowerstring(""abcd"")==['ab",0,"[""<class 'NameError'>: name 'b' is not defined""]"
16,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match",0,"[""<class 'NameError'>: name 'h' is not defined""]"
17,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def square_perimeter(a):
  perimeter=4*a
  return perimeter","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40

""""""

def square_perimeter(a):
    return a*4

print(square_perimeter(10))

""""""
Write a function",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 7)""]"
11,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""

""""""

def remove_Occ(str, ch):
    return str.replace(ch, """")

print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""o""))
print(remove_Occ(""hello"", ""h""))
print(remove_Occ(""hello"", ""e""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
16,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match",0,"[""<class 'NameError'>: name 'h' is not defined""]"
17,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def square_perimeter(a):
  perimeter=4*a
  return perimeter","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40

""""""

def square_perimeter(a):
    return a*4

print(square_perimeter(10))

""""""
Write a function",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 7)""]"
18,"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\' ']","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","Write a function to remove characters from the first string which are present in the second string.
>>> Example: remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'

'''

def remove_dirty_chars(string1, string2):
    return ''.join(c for c in string1 if c not in string2)

print(remove_dirty_chars(""probasscurve"", ""pros""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
19,"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","Write a function to find whether a given array of integers contains any duplicate element.
>>> Example: test_duplicate(([1,2,3,4,5]))==False
>>> Example: test_duplicate(([1,2,3,4,5,1]))==True
>>> Example: test_duplicate(([1,2,3,4,5,2]))==True
>>> Example: test_duplicate(([1,2,3,4,5,2",0,"[""Test 0 <class 'NameError'>: name 'test_duplicate' is not defined"", ""Test 1 <class 'NameError'>: name 'test_duplicate' is not defined"", ""Test 2 <class 'NameError'>: name 'test_duplicate' is not defined""]"
20,"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","Write a function to check if the given number is woodball or not.
>>> Example: is_woodall(383) == True
>>> Example: is_woodall(876) == False
""""""

def is_woodall(num):
    if num % 7 == 0 and num % 5 == 0:
        return True
    else:
        return False

print(is_woodall(383))
print(is_woodall(876))
",2,"[""Test 0 <class 'AssertionError'>: "", 'Test 1 Success', 'Test 2 Success']"
21,"['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']","def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","Write a function to find m number of multiples of n.
>>> Example: multiples_of_num(4,3)== [3,6,9,12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_",0,"[""Test 0 <class 'NameError'>: name 'multiples_of_num' is not defined"", ""Test 1 <class 'NameError'>: name 'multiples_of_num' is not defined"", ""Test 2 <class 'NameError'>: name 'multiples_of_num' is not defined""]"
22,"['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']","def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","Write a function to find the first duplicate element in a given array of integers.
>>> Example: find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 5]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 6]))==6
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7, 7]))==7
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7, 8]))==-1
>>> Example: find_first_duplicate(([1, 2, 3,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
23,"['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']","def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","Write a python function to find the maximum sum of elements of list in a list of lists.
>>> Example: maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
>>> maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33

""""""

def maximum_Sum(lst):
    max_sum = 0
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            max_sum = max(max_sum, lst[i][j])
    return max_sum

print(maximum_Sum([[1,2,3],[4,5,6],[10,11",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 8)""]"
24,"['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']","def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","Write a function to convert the given binary number to its decimal equivalent.
>>> Example: binary_to_decimal(100) == 4

""""""

def binary_to_decimal(binary):
    binary = str(binary)
    decimal = 0
    for i in range(len(binary)):
        decimal += int(binary[i]) * 2**(len(binary)-i-1)
    return decimal

print(binary_to_decimal(100))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
25,"['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']","def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","Write a python function to find the product of non-repeated elements in a given array.
>>> Example: find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2",0,"[""Test 0 <class 'NameError'>: name 'find_Product' is not defined"", ""Test 1 <class 'NameError'>: name 'find_Product' is not defined"", ""Test 2 <class 'NameError'>: name 'find_Product' is not defined""]"
26,"['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']","def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","Write a function to check if the given tuple list has all k elements.
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 5) == False
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 6) == False",0,"[""<class 'NameError'>: name 'e' is not defined""]"
27,"[""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"", ""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"", ""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']""]","import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']

# Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']

# Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters",0,"[""<class 'NameError'>: name 's' is not defined""]"
28,"['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3']","def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","Write a python function to find binomial co-efficient.
>>> Example: binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10",0,"[""Test 0 <class 'NameError'>: name 'binomial_Coeff' is not defined"", ""Test 1 <class 'NameError'>: name 'binomial_Coeff' is not defined"", ""Test 2 <class 'NameError'>: name 'binomial_Coeff' is not defined""]"
29,"['assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1', 'assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3', 'assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5']","def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","Write a python function to find the element occurring odd number of times.
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],3) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],1) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],0) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],5) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],6) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],8) == -1
>>> Example: get_Odd_Occurrence([1,2,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
30,"['assert count_Substring_With_Equal_Ends(""abc"") == 3', 'assert count_Substring_With_Equal_Ends(""abcda"") == 6', 'assert count_Substring_With_Equal_Ends(""ab"") == 2']","def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","Write a python function to count all the substrings starting and ending with same characters.
>>> Example: count_Substring_With_Equal_Ends(""abc"") == 3
>>> count_Substring_With_Equal_Ends(""abc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_End",0,"[""<class 'NameError'>: name 'd' is not defined""]"
31,"['assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]']","def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],4)==[5, 7, 1, 3]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[5, 7, 1, 3, 4]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],6)==[5, 7, 1, 3, 4, 6]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],7)==[5, 7, 1, 3, 4, 6, 8]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],8)==[5, 7, 1, 3, 4, 6, 8, 9]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],9)==[5, 7, 1, 3, 4, 6, 8, 9, 11]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
32,"['assert max_Prime_Factors(15) == 5', 'assert max_Prime_Factors(6) == 3', 'assert max_Prime_Factors(2) == 2']","import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","Write a python function to find the largest prime factor of a given number.
>>> Example: max_Prime_Factors(15) == 5
>>> Example: max_Prime_Factors(20) == 5
>>> Example: max_Prime_Factors(25) == 5
>>> Example: max_Prime_Factors(30) == 5
>>> Example: max_Prime_Factors(35) == 5
>>> Example: max_Prime_Factors(40) == 5
>>> Example: max_Prime_Factors(45) == 5
>>> Example: max_Prime_Factors(50) == 5
>>> Example: max_Prime_Factors(55) == 5
>>> Example: max_Prime_Factors(60) == 5
>>> Example: max_Prime_Factors(65) == 5
>>> Example: max_Prime_Factors(70) == 5
>>> Example: max_Prime_Factors(75) == 5
>>> Example: max_Prime_Factors(80) == 5
>>> Example: max_Prime_Factors(85) == 5
>>> Example: max_Prime_Factors(90) == 5
>>> Example: max_Prime_Factors(95) == 5
>>> Example: max_Prime_Factors(100) == 5
>>> Example: max_Prime_Factors(105) == 5
>>> Example: max_Prime_Factors(110) == 5
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
33,"['assert decimal_To_Binary(10) == 1010', 'assert decimal_To_Binary(1) == 1', 'assert decimal_To_Binary(20) == 10100']","def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","Write a python function to convert a decimal number to binary number.
>>> Example: decimal_To_Binary(10) == 1010

""""""

def decimal_To_Binary(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary

decimal = int(input(""Enter a decimal number: ""))
print(decimal_To_Binary(decimal))
",0,"[""<class 'ValueError'>: invalid literal for int() with base 10: ''""]"
34,"['assert find_missing([1,2,3,5],4) == 4', 'assert find_missing([1,3,4,5],4) == 2', 'assert find_missing([1,2,3,5,6,7],5) == 4']","def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","Write a python function to find the missing number in a sorted array.
>>> Example: find_missing([1,2,3,5],4) == 4
>>> Example: find_missing([1,2,3,5],6) == 4
>>> Example: find_missing([1,2,3,5],7) == 4
>>> Example: find_missing([1,2,3,5],8) == 4
>>> Example: find_missing([1,2,3,5],9) == 4
>>> Example: find_missing([1,2,3,5],10) == 4
>>> Example: find_missing([1,2,3,5],11) == 4
>>> Example: find_missing([1,2,3,5],12) == 4
>>> Example: find_missing([1,2,3,5],13) == 4
>>> Example: find_missing([1,2,3,5],14) == 4
>>> Example: find_missing([1,2,3,5],15) == 4
>>> Example: find_missing([1,2,3,5],16) == 4
>>> Example: find_missing([1,2,3,5],17) == 4
>>> Example: find_missing([1,2,3,5],18) == 4
>>> Example: find_missing([1,2,3,5],19) == 4
>>> Example: find_missing([1,2,3,5],20) == 4
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
35,"['assert find_rect_num(4) == 20', 'assert find_rect_num(5) == 30', 'assert find_rect_num(6) == 42']","def find_rect_num(n):
  return n*(n + 1) ","Write a function to find the n-th rectangular number.
>>> Example: find_rect_num(4) == 20
""""""

def find_rect_num(n):
    return",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
36,"['assert find_Nth_Digit(1,2,1) == 5', 'assert find_Nth_Digit(3,5,1) == 6', 'assert find_Nth_Digit(5,6,5) == 3']","def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","Write a python function to find the nth digit in the proper fraction of two given numbers.
>>> Example: find_Nth_Digit(1,2,1) == 5
>>> Example: find_Nth_Digit(1,2,2) == 0
>>> Example: find_Nth_Digit(1,2,3) == 1
>>> Example: find_Nth_Digit(1,2,4) == 0
>>> Example: find_Nth_Digit(1,2,5) == 1
>>> Example: find_Nth_Digit(1,2,6) == 0
>>> Example: find_Nth_Digit(1,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
37,"[""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']""]","def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","Write a function to sort a given mixed list of integers and strings.
>>> Example: sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green','red', 'white']
True
>>> Example: sort_mixed_list([1,2,3,4,5,6,7,8,9,10])==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
True
>>> Example: sort_mixed_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==[1, 2, 3, 4, 5, 6, 7, 8, 9,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
38,"['assert div_even_odd([1,3,5,7,4,1,6,8])==4', 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert div_even_odd([1,5,7,9,10])==10']","def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","Write a function to find the division of first even and odd number of a given list.
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==4
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==2
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
39,"['assert rearange_string(""aab"")==(\'aba\')', 'assert rearange_string(""aabb"")==(\'abab\')', 'assert rearange_string(""abccdd"")==(\'cdabcd\')']","import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
>>> Example: rearange_string(""aab"")==('aba')
>>> Example: rearange_string(""aaab"")==('abaa')
>>> Example: rearange_string(""aabb"")==('abab')
>>> Example: rearange_string(""abc"")==('abc')
>>> Example: rearange_string(""a"")==('a')
>>> Example: rearange_string("""")==('')
>>> Example: rearange_string(""aa"")==('aa')
>>> Example: rearange_string(""aab"")==('aab')
>>> Example: rearange_string(""aabb"")==('aabb')
>>> Example: rearange_string(""aabbb"")==('aabbb')
>>> Example: rearange_string(""aabbbb"")==('aabbbb')
>>> Example: rearange_string(""aabbbbb"")==('aabbbbb')
>>> Example: rearange_string(""aabbbbbb"")==('aabbbbbb')
>>> Example: rearange_string(""aabbbbbbb"")==('aabbbbbbb')
>>> Example: rearange_string(""aabbbbbbbb"")==('aabbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbb"")==('aabbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbb"")==('aabbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbb"")==('aabbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbb"")==('aabbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbb"")==('aabbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbbbb"")==('aabb",0,"[""<class 'NameError'>: name 'b' is not defined""]"
40,"['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']","from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","Write a function to find frequency of the elements in a given list of lists using collections module.
>>> Example: freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})

'''

from collections import Counter

def freq_element(lst):
    return Counter(lst)

print(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7,",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
41,"['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']","def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","Write a function to filter even numbers using lambda function.
>>> Example: filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
>>> Example: filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
42,"['assert find_Sum([1,2,3,1,1,4,5,6],8) == 3', 'assert find_Sum([1,2,3,1,1],5) == 3', 'assert find_Sum([1,1,2],3) == 2']","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","Write a python function to find the sum of repeated elements in a given array.
>>> Example: find_Sum([1,2,3,1,1,4,5,6],8) == 3
>>> find_Sum([1,2,3,1,1,4,5,6],8) == 3
>>> find_Sum",0,"[""<class 'NameError'>: name 'm' is not defined""]"
43,"['assert text_match(""aab_cbbbc"") == \'Found a match!\'', 'assert text_match(""aab_Abbbc"") == \'Not matched!\'', 'assert text_match(""Aaab_abbbc"") == \'Not matched!\'']","import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore using regex.
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
44,"['assert text_match_string("" python"")==(\'Not matched!\')', 'assert text_match_string(""python"")==(\'Found a match!\')', 'assert text_match_string(""  lang"")==(\'Not matched!\')']","import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","Write a function that matches a word at the beginning of a string.
>>> Example: text_match_string("" python"")==('Not matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
45,"['assert get_gcd([2, 4, 6, 8, 16]) == 2', 'assert get_gcd([1, 2, 3]) == 1', 'assert get_gcd([2, 4, 6, 8]) == 2 ']","def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","Write a function to find the gcd of the given array elements.
>>> Example: get_gcd([2, 4, 6, 8, 16]) == 2

""""""

def get_gcd(arr):
    if len(arr) == 1:
        return arr[0]
    else:
        return get_gcd(arr[1:])

print(get_gcd([2, 4, 6, 8, 16]))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
46,"['assert test_distinct([1,5,7,9]) == True', 'assert test_distinct([2,4,5,5,7,9]) == False', 'assert test_distinct([1,2,3]) == True']","def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","Write a python function to determine whether all the numbers are different from each other are not.
>>> Example: test_distinct([1,5,7,9]) == True
>>> Example: test_distinct([1,5,7,9]) == False
>>> Example: test_distinct([1,5,7,9]) == True
>>> Example: test_distinct([1,5,7,9]) == False
>>> Example: test_distinct([1",0,"[""Test 0 <class 'NameError'>: name 'test_distinct' is not defined"", ""Test 1 <class 'NameError'>: name 'test_distinct' is not defined"", ""Test 2 <class 'NameError'>: name 'test_distinct' is not defined""]"
47,"['assert compute_Last_Digit(2,4) == 2', 'assert compute_Last_Digit(6,8) == 6', 'assert compute_Last_Digit(1,2) == 2']","def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","Write a python function to find the last digit when factorial of a divides factorial of b.
>>> Example: compute_Last_Digit(2,4) == 2
>>> compute_Last_Digit(2,4) == 2
>>> compute_Last_Digit(3,4) == 1
>>> compute_Last_Digit(4,4) == 4
>>> compute_Last_Digit(5,4) == 1
>>> compute_Last_Digit(6,4) == 6
>>> compute_Last_Digit(7,4) == 1
>>> compute_Last_Digit(8,4) == 8
>>> compute_Last_Digit(9,4) == 9
>>> compute_Last_Digit(10,4) == 1
>>> compute_Last_Digit(11,4) == 1
>>> compute_Last_Digit(12,4) == 1
>>> compute_Last_Digit(13,4) == 1
>>> compute_Last_Digit(14,4) == 1
>>> compute_Last_Digit(15,4) == 1
>>> compute_Last_Digit(16,4) == 1
>>>",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
48,"['assert odd_bit_set_number(10) == 15', 'assert odd_bit_set_number(20) == 21', 'assert odd_bit_set_number(30) == 31']","def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","Write a python function to set all odd bits of a given number.
>>> Example: odd_bit_set_number(10) == 15
>>> odd_bit_set_number(11) == 11
>>> odd_bit_set_number(12) == 11
>>> odd_bit_set_number(13) == 11
>>> odd_bit_set_number(14) == 11
>>> odd_bit_set_number(15) == 15
>>> odd_bit_set_number(16) == 15
>>> odd_bit_set_number(17) == 15
>>> odd_bit_set_number(18) == 15
>>> odd_bit_set_number(19) == 15
>>> odd_bit_set_number(20) == 15
>>> odd_bit_set_number(21) == 15
>>> odd_bit_set_number(22) == 15
>>> odd_",0,"[""Test 0 <class 'NameError'>: name 'odd_bit_set_number' is not defined"", ""Test 1 <class 'NameError'>: name 'odd_bit_set_number' is not defined"", ""Test 2 <class 'NameError'>: name 'odd_bit_set_number' is not defined""]"
49,"['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]']","def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","Write a function to extract every first or specified element from a given two-dimensional list.
>>> Example: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
>>> Example: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
50,"['assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])', 'assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])', 'assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])']","def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","Write a function to find the list with minimum length using lambda function.
>>> Example: min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [5, 7, 9])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [5, 7, 9])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13",0,"[""Test 0 <class 'NameError'>: name 'min_length_list' is not defined"", ""Test 1 <class 'NameError'>: name 'min_length_list' is not defined"", ""Test 2 <class 'NameError'>: name 'min_length_list' is not defined""]"
51,"['assert check_equilateral(6,8,12)==False ', 'assert check_equilateral(6,6,12)==False', 'assert check_equilateral(6,6,6)==True']","def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","Write a function to print check if the triangle is equilateral or not.
>>> Example: check_equilateral(6,8,12)==False 
>>> check_equilateral(6,8,12)==True

""""""

def check_equilateral(a,b,c):
    if a==b and b==c and a==c:
        return True
    else:
        return False
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
52,"['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']","def parallelogram_area(b,h):
  area=b*h
  return area","Write a function to caluclate area of a parallelogram.
>>> Example: parallelogram_area(10,20)==200
>>> Expected Output: 200

""""""

def parallelogram_area(a,b):
    ",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
53,"['assert check_Equality(""abcda"") == ""Equal""', 'assert check_Equality(""ab"") == ""Not Equal""', 'assert check_Equality(""mad"") == ""Not Equal""']","def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","Write a python function to check whether the first and last characters of a given string are equal or not.
>>> Example: check_Equality(""abcda"") == ""Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality",0,"[""<class 'NameError'>: name 'y' is not defined""]"
54,"['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']","def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","Write a function to sort the given array by using counting sort.
>>> Example: counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]

""""""

def counting_sort(arr):
    """"""
    >>> counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]
    True
    """"""
    n = len(arr)
    count = [0] * (max(arr) + 1)
    for i in arr:
        count[i] += 1
    for i in range(1, len(count)):
        count[i] += count[i - 1]
    output = [0] * n
    for i in range(n - 1, -1, -1):
        output[count[arr[i]] - 1] = arr[i]
        count[arr[i]] -= 1
    return output

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
55,"['assert tn_gp(1,5,2)==16', 'assert tn_gp(1,5,4)==256', 'assert tn_gp(2,6,3)==486']","import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","Write a function to find t-nth term of geometric series.
>>> Example: tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16",0,"[""Test 0 <class 'NameError'>: name 'tn_gp' is not defined"", ""Test 1 <class 'NameError'>: name 'tn_gp' is not defined"", ""Test 2 <class 'NameError'>: name 'tn_gp' is not defined""]"
56,"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']","def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","Write a python function to check if a given number is one less than twice its reverse.
>>> Example: check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
57,"['assert find_Max_Num([1,2,3],3) == 321', 'assert find_Max_Num([4,5,6,1],4) == 6541', 'assert find_Max_Num([1,2,3,9],4) == 9321']","def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","Write a python function to find the largest number that can be formed with the given digits.
>>> Example: find_Max_Num([1,2,3],3) == 321
>>> Example: find_Max_Num([1,2,3],4) == -1
>>> Example: find_Max_Num([1,2,3],5) == -1
>>> Example: find_Max_Num([1,2,3],6) == -1
>>> Example: find_Max_Num([1,2,3],7) == -1
>>> Example: find_Max_Num([1,2,3],8) == -1
>>> Example: find_Max_Num([1,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
58,"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False']","def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","Write a python function to check whether the given two integers have opposite sign or not.
>>> Example: opposite_Signs(1,-2) == True
>>> opposite_Signs(1,2) == False
>>> opposite_Signs(1",0,"[""Test 0 <class 'NameError'>: name 'opposite_Signs' is not defined"", ""Test 1 <class 'NameError'>: name 'opposite_Signs' is not defined"", ""Test 2 <class 'NameError'>: name 'opposite_Signs' is not defined""]"
59,"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']","def is_octagonal(n): 
	return 3 * n * n - 2 * n ","Write a function to find the nth octagonal number.
>>> Example: is_octagonal(5) == 65
>>> True

""""""

def is_octagonal(n):
    return n * (3 *",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
60,"['assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5', 'assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4', 'assert max_len_sub([9, 11, 13, 15, 18], 5) == 1']","def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.
>>> Example: max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 7) == 4
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 6) == 3
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 5) == 2
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 4) == 0
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 3) == 2
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 2) == 1
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 1) == 0
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 0) == 0
>>> max_len_sub([2, 5, 6, 3, 7",0,"[""Test 0 <class 'NameError'>: name 'max_len_sub' is not defined"", ""Test 1 <class 'NameError'>: name 'max_len_sub' is not defined"", ""Test 2 <class 'NameError'>: name 'max_len_sub' is not defined""]"
61,"[""assert count_Substrings('112112',6) == 6"", ""assert count_Substrings('111',3) == 6"", ""assert count_Substrings('1101112',7) == 12""]","from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","Write a python function to count number of substrings with the sum of digits equal to their length.
>>> Example: count_Substrings('112112',6) == 6
>>> count_Substrings('112112',6) == 6
>>> count_Substrings('112112',5) == 5
>>> count_Substrings('112112',4) == 4
>>> count_Substrings('112112',3) == 3
>>> count_Substrings('112112',2) == 2
>>> count_Substrings('112112',1) == 1
>>> count_Substrings('112112',0) == 0
>>> count_Substrings('112112',-1) == 0
>>> count_Substrings('112112',-2) == 0
>>> count_Substrings('112112',-3) == 0
>>> count_Substrings('112112',-4) == 0
>>> count_Substrings('112112',-5) == 0
>>> count_Substrings('112112',-6) == 0
>>> count_Substrings('112112',-7) == 0
>>> count_Substrings('112112',-8) == 0
>>> count_Substrings('112112',-9) == 0
>>> count_Substrings('112112',-10",0,"[""Test 0 <class 'NameError'>: name 'count_Substrings' is not defined"", ""Test 1 <class 'NameError'>: name 'count_Substrings' is not defined"", ""Test 2 <class 'NameError'>: name 'count_Substrings' is not defined""]"
62,"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']","def smallest_num(xs):
  return min(xs)
","Write a python function to find smallest number in a list.
>>> Example: smallest_num([10, 20, 1, 45, 99]) == 1
>>> smallest_num([10",0,"[""Test 0 <class 'NameError'>: name 'smallest_num' is not defined"", ""Test 1 <class 'NameError'>: name 'smallest_num' is not defined"", ""Test 2 <class 'NameError'>: name 'smallest_num' is not defined""]"
63,"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']","def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","Write a function to find the maximum difference between available pairs in the given tuple list.
>>> Example: max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
>>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
""""""

def max_difference(tuple_list):
    """"""
    >>> max_difference([(3, 5), (",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 3)""]"
64,"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]","def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","Write a function to sort a list of tuples using lambda.
>>> Example: subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
True

""""""

def subject_marks(lst):
    return sorted(lst, key=lambda x: x[1], reverse=True)

print(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
65,"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']","def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","Write a function of recursion list sum.
>>> Example: recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6]))==21
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))==45
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
66,"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']","def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","Write a python function to count positive numbers in a list.
>>> Example: pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2",0,"[""Test 0 <class 'NameError'>: name 'pos_count' is not defined"", ""Test 1 <class 'NameError'>: name 'pos_count' is not defined"", ""Test 2 <class 'NameError'>: name 'pos_count' is not defined""]"
67,"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']","def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","Write a function to find the number of ways to partition a set of bell numbers.
>>> Example: bell_number(2)==2
>>> Example: bell_number(3)==3
>>> Example: bell_number(4)==5
>>> Example: bell_number(5)==8
>>> Example: bell_number(6)==13
>>> Example: bell_number(7)==21
>>> Example: bell_number(8)==34
>>> Example: bell_number(9)==55
>>> Example: bell_number(10)==89
>>> Example: bell_number(11)==144
>>> Example: bell_number(12)==233
>>> Example: bell_number(13)==377
>>> Example: bell_number(14)==610
>>> Example: bell_number(15)==987
>>> Example: bell_number(16)==1634
>>> Example: bell_number(17)==2657
>>> Example: bell_number(18)==4181
>>> Example: bell_number(19)==62270
>>> Example: bell_number(20)==92274
>>> Example: bell_number(21)==138561
>>> Example: bell_number(22)==248531
>>> Example: bell_number(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
68,"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']","def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","Write a python function to check whether the given array is monotonic or not.
>>> Example: is_Monotonic([6, 5, 4, 4]) == True
>>> Example: is_Monotonic([6, 5, 4, 1]) == False
>>> Example: is_Monotonic([1, 1, 1]) == True
>>> Example: is_Monotonic([1, 1, 1, 1]) == True
>>> Example: is_Monotonic([1, 1, 1, 2]) == False
>>> Example: is_Monotonic([1, 2, 1]) == False
>>> Example: is_Monotonic([1, 1, 2]) ==",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
69,"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']","def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","Write a function to check whether a list contains the given sublist or not.
>>> Example: is_sublist([2,4,3,5,7],[3,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5])==True
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7])==True
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
70,"[""assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"", ""assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'"", ""assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'""]","def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","Write a function to find whether all the given tuples have equal length or not.
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 2) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 1) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 0) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 4) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 5) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 6) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 7) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33),",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
71,"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']","def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","Write a function to sort a list of elements using comb sort.
>>> Example: comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]

""""""

def comb_sort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap!= 1 or swapped:
        gap = int(gap / 1.3)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True
    return arr

print(comb_sort([5, 15, 37, 25, 79]))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
72,"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']","def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","Write a python function to check whether the given number can be represented as difference of two squares or not.
>>> Example: dif_Square(5) == True
>>> dif_Square(6) == False
>>> dif_Square(7) == True
>>> dif_Square(8) == False
>>> dif_Square(9) == True
>>> d",0,"[""<class 'NameError'>: name 'd' is not defined""]"
73,"[""assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']"", ""assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']"", ""assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']""]","import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","Write a function to split the given string with multiple delimiters by using regex.
>>> Example: multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']

'''

import re

def multiple_split(string):",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
74,"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False ']","def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","Write a function to check whether it follows the sequence given in the patterns array.
>>> Example: is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True 
>>> Example: is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""c""])==False

""""""

def is_samepatterns(patterns, patterns_to_check):
    if len(patterns)!= len(patterns_to_check):
        return False
    for i in range(len(patterns)):
        if patterns[i]!= patterns_to_check[i]:
            return False
    return True

print(is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""]))
print(is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""c""]))
",2,"[""Test 0 <class 'AssertionError'>: "", 'Test 1 Success', 'Test 2 Success']"
75,"[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"", ""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'"", ""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'""]","def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","Write a function to find tuples which have all elements divisible by k from the given list of tuples.
>>> Example: find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
>>> Example: find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7) == '[(7, 9, 6), (12, 18, 21)]'
>>> Example: find_tuples",0,"[""<class 'NameError'>: name 's' is not defined""]"
76,"['assert count_Squares(4,3) == 20', 'assert count_Squares(2,2) == 5', 'assert count_Squares(1,1) == 1']","def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","Write a python function to count the number of squares in a rectangle.
>>> Example: count_Squares(4,3) == 20
>>> Example: count_Squares(5,5) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25",0,"[""Test 0 <class 'NameError'>: name 'count_Squares' is not defined"", ""Test 1 <class 'NameError'>: name 'count_Squares' is not defined"", ""Test 2 <class 'NameError'>: name 'count_Squares' is not defined""]"
77,"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']","def is_Diff(n): 
    return (n % 11 == 0) ","Write a python function to find the difference between sum of even and odd digits.
>>> Example: is_Diff (12345) == False
>>> Example: is_Diff (1234) == True
",0,"[""Test 0 <class 'NameError'>: name 'is_Diff' is not defined"", ""Test 1 <class 'NameError'>: name 'is_Diff' is not defined"", ""Test 2 <class 'NameError'>: name 'is_Diff' is not defined""]"
78,"['assert count_With_Odd_SetBits(5) == 3', 'assert count_With_Odd_SetBits(10) == 5', 'assert count_With_Odd_SetBits(15) == 8']","def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","Write a python function to find number of integers with odd number of set bits.
>>> Example: count_With_Odd_SetBits(5) == 3
>>> count_With_Odd_SetBits(5) == 2
>>> count_With_Odd_SetBits(6) == 1
>>> count_With_Odd_SetBits(7) == 0
>>> count_With_Odd_SetBits(8) == 0
>>> count_With_Odd_SetBits(9) == 1
>>> count_With_Odd_SetBits(10) == 2
>>> count_With_Odd_SetBits(11) == 3
>>> count_With_Odd_SetBits(12) == 4
>>> count_With_Odd_SetBits(13) == 5
>>> count_With",0,"[""<class 'NameError'>: name 'h' is not defined""]"
79,"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']","def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","Write a python function to check whether the length of the word is odd or not.
>>> Example: word_len(""Hadoop"") == False
>>> word_len(""Hadoop"") == True
>>> word_len(""Python"") == True
>>> word_len("""") == False
>>> word_len(""h"") == False
>>> word_len(""hh"") == False
>>> word_len(""Hi"") == False
>>> word_len(""HiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHi",0,"[""Test 0 <class 'NameError'>: name 'word_len' is not defined"", ""Test 1 <class 'NameError'>: name 'word_len' is not defined"", ""Test 2 <class 'NameError'>: name 'word_len' is not defined""]"
80,"['assert tetrahedral_number(5) == 35.0', 'assert tetrahedral_number(6) == 56.0', 'assert tetrahedral_number(7) == 84.0']","def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","Write a function to find the nth tetrahedral number.
>>> Example: tetrahedral_number(5) == 35.0
>>> tetrahedral_number(10) == 220.0
>>> tetrahedral_number(20) == 46867749.0
""""""

",0,"[""Test 0 <class 'NameError'>: name 'tetrahedral_number' is not defined"", ""Test 1 <class 'NameError'>: name 'tetrahedral_number' is not defined"", ""Test 2 <class 'NameError'>: name 'tetrahedral_number' is not defined""]"
81,"['assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]', 'assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]', 'assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]']","def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","Write a function to zip the two given tuples.
>>> Example: zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]

""""""

def zip_tuples(tuple1, tuple2):
    return list(zip(tuple1, tuple2))

print(zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6)))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
82,"['assert volume_sphere(10)==4188.790204786391', 'assert volume_sphere(25)==65449.84694978735', 'assert volume_sphere(20)==33510.32163829113']","import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","Write a function to find the volume of a sphere.
>>> Example: volume_sphere(10)==4188.790204786391
>>> Expected Output:
>>> 4188.790204786391

""""""

# Solution

def volume_sphere(radius):
    return (4/3)*(3.14159)*(radius**",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
83,"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']","def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","Write a python function to find the character made by adding all the characters of the given string.
>>> Example: get_Char(""abc"") == ""f""
>>> Example: get_Char(""abcdef"") == ""f""
>>> Example: get_Char(""abcdefgh"") == ""f""
>>> Example: get_Char(""abcdefghi"") == ""f""
>>> Example: get_Char(""abcdefghij"") == ""f""
>>> Example: get_Char(""abcdefghijk"") == ""f""
>>> Example: get_Char(""abcdefghijkl"") == ""f""
>>> Example: get_Char(""abcdefghijklmn"") == ""f""
>>> Example: get_Char(""abcdefghijklmnop"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopq"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopqr"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopqrst"") == ""f""
>>> Example: get_Char(""abcdefgh",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
84,"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']","def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","Write a function to find the n-th number in newman conway sequence.
>>> Example: sequence(10) == 6

""""""

def sequence(n):
    if n == 1:
        return 1
    else:
        return sequence(n-1) + sequence(n-2)

print(sequence(10))
",0,"[""<class 'RecursionError'>: maximum recursion depth exceeded in comparison""]"
85,"['assert surfacearea_sphere(10)==1256.6370614359173', 'assert surfacearea_sphere(15)==2827.4333882308138', 'assert surfacearea_sphere(20)==5026.548245743669']","import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","Write a function to find the surface area of a sphere.
>>> Example: surfacearea_sphere(10)==1256.6370614359173
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
",0,"[""Test 0 <class 'NameError'>: name 'surfacearea_sphere' is not defined"", ""Test 1 <class 'NameError'>: name 'surfacearea_sphere' is not defined"", ""Test 2 <class 'NameError'>: name 'surfacearea_sphere' is not defined""]"
86,"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']","def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","Write a function to find nth centered hexagonal number.
>>> Example: centered_hexagonal_number(10) == 271
""""""

def centered_hexagonal_number(n):
    return (n*(3*n-1))//2

print(centered_hex",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
87,"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']","import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","Write a function to merge three dictionaries into a single expression.
>>> Example: merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
True
>>> Example: merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", """,0,"[""<class 'SyntaxError'>: EOL while scanning string literal (<string>, line 1)""]"
88,"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ']","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","Write a function to get the frequency of the elements in a list.
>>> Example: freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 

'''

def freq_count(lst):
    freq = {}
    for i in lst:
        if i",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
89,"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']","def closest_num(N):
  return (N - 1)","Write a function to find the closest smaller number than n.
>>> Example: closest_num(11) == 10
>>> closest_num(10) == 9
>>> closest",0,"[""<class 'NameError'>: name 't' is not defined""]"
90,"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']","def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","Write a python function to find the length of the longest word.
>>> Example: len_log([""python"",""PHP"",""bigdata""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++"",""c#""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++"",""c#"",""c#""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata",0,"[""<class 'NameError'>: name 'a' is not defined""]"
91,"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']","def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","Write a function to check if a substring is present in a given list of string values.
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""are"")==False
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""c"")==True
>>> Example: find_substring",0,"[""<class 'NameError'>: name 'g' is not defined""]"
92,"['assert is_undulating(""1212121"") == True', 'assert is_undulating(""1991"") == False', 'assert is_undulating(""121"") == True']","def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","Write a function to check whether the given number is undulating or not.
>>> Example: is_undulating(""1212121"") == True
>>> Example: is_undulating(""1212122"") == False
>>> Example: is_undulating(""1212123"") == False
>>> Example: is_undulating(""1212124"") == False
>>> Example: is_undulating(""1212125"") == False
>>> Example: is_undulating(""1212126"") == False
>>> Example: is_undulating(""1212127"") == False
>>> Example: is_undulating(""1212128"") == False
>>> Example: is_undulating(""1212129",0,"[""Test 0 <class 'NameError'>: name 'is_undulating' is not defined"", ""Test 1 <class 'NameError'>: name 'is_undulating' is not defined"", ""Test 2 <class 'NameError'>: name 'is_undulating' is not defined""]"
93,"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']","def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","Write a function to calculate the value of 'a' to the power 'b'.
>>> Example: power(3,4) == 81
>>> power(3,4) == 81

""""""

def power(a,b):
    return a**b

print(power(3,4))

""""""
Write a function to calculate the value of 'a' to the power 'b'.
>>> Example: power(3,4) == 81
>>> power(3,4) == 81

""""""

def power(a,b",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 13)""]"
94,"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]","from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","Write a function to extract the index minimum value record from the given tuples.
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum",0,"[""<class 'NameError'>: name 'm' is not defined""]"
95,"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']","def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","Write a python function to find the minimum length of sublist.
>>> Example: Find_Min_Length([[1],[1,2]]) == 1
>>> Example: Find_Min_Length([[1,2],[1,2,3]]) == 2
>>> Example: Find_Min_Length([[1,2,3],[1,2,3,4]]) == 3
>>> Example: Find_Min_",0,"[""Test 0 <class 'NameError'>: name 'Find_Min_Length' is not defined"", ""Test 1 <class 'NameError'>: name 'Find_Min_Length' is not defined"", ""Test 2 <class 'NameError'>: name 'Find_Min_Length' is not defined""]"
96,"['assert divisor(15) == 4 ', 'assert divisor(12) == 6', 'assert divisor(9) == 3']","def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","Write a python function to find the number of divisors of a given integer.
>>> Example: divisor(15) == 4 
>>> divisor(15) == 4

""""""

def divisor(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count

print(divisor(15))

""""""
",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 10)""]"
97,"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","Write a function to find frequency count of list of lists.
>>> Example: frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}

""""""

def frequency_lists(lst):
    freq_dict = {}
    for i in lst:
        for j in i:
            if j in freq_dict:
                freq_dict[j] += 1
            else:
                freq_dict[j] = 1
    return freq_dict

print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
98,"['assert multiply_num((8, 2, 3, -1, 7))==-67.2', 'assert multiply_num((-10,-20,-30))==-2000.0', 'assert multiply_num((19,15,18))==1710.0']","def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","Write a function to multiply all the numbers in a list and divide with the length of the list.
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example:",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
99,"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111' ""]","def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","Write a function to convert the given decimal number to its binary equivalent.
>>> Example: decimal_to_binary(8) == '1000'

""""""

def decimal_to_binary(decimal):
    binary = """"
    while decimal > 0:
        binary = str(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
100,"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","Write a function to find the next smallest palindrome of a specified number.
>>> Example: next_smallest_palindrome(99)==101
>>> next_smallest_palindrome(12)==13
>>> next_smallest_palindrome(10)==11
>>> next_smallest_palindrome(11)==12
>>> next_smallest_palindrome(1)==2
>>> next_smallest_palindrome(2)==3
>>> next_smallest_palindrome(3)==4
>>> next_smallest_palindrome(4)==5
>>> next_smallest_palindrome(5)==6
>>> next_smallest_palindrome(6)==",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
101,"['assert kth_element([12,3,5,7,19], 5, 2) == 3', 'assert kth_element([17,24,8,23], 4, 3) == 8', 'assert kth_element([16,21,25,36,4], 5, 4) == 36']","def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","Write a function to find the kth element in the given array.
>>> Example: kth_element([12,3,5,7,19], 5, 2) == 3
>>> Example: kth_element([12,3,5,7,19], 5, 3) == 5
>>> Example: kth_element([12,3,5,7,19], 5, 4) == 7
>>> Example: kth_element([12,3,5,7,19], 5, 5) == 19
>>> Example: kth_element([12,3,5,7,19], 5, 6) == -1
""""""

def kth_element(arr, k, n):
    if k > n:
        return -1
    if k == 1",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
102,"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]","def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","Write a function to convert snake case string to camel case string.
>>> Example: snake_to_camel('python_program')=='PythonProgram'
>>> Example: snake_to_camel('python_program_1')=='PythonProgram1'
>>> Example: snake_to_camel('python_program_2')=='PythonProgram2'
>>> Example: snake_to_camel('python_program_3')=='PythonProgram3'
>>> Example: snake_to_camel('python_program",0,"[""<class 'NameError'>: name 'm' is not defined""]"
103,"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","Write a function to find eulerian number a(n, m).
>>> Example: eulerian_num(3, 1) == 4
>>> eulerian_num(3, 1) == 4
>>> eulerian_num(3, 2) == 5
>>> eulerian_num(3, 3) == 6
>>> eulerian_num(3, 4) == 7
>>> eulerian_num(3, 5) == 8
>>> eulerian_num(3, 6) == 9
>>> eulerian_num(3, 7) == 10
>>> eulerian_num(3, 8) == 11
>>> eulerian_num(3, 9) == 12
>>> eulerian_num(3, 10) == 13
>>> e",0,"[""<class 'NameError'>: name 'e' is not defined""]"
104,"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']","def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result","Write a function to sort each sublist of strings in a given list of lists using lambda function.
>>> Example: sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]

""""""

def sort_sublists(lst):
    return sorted(lst, key=lambda x: x[0])

print(sort_sublists([[""",0,"[""<class 'SyntaxError'>: EOL while scanning string literal (<string>, line 4)""]"
105,"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']","def count(lst):   
    return sum(lst) ","Write a python function to count true booleans in the given list.
>>> Example: count([True,False,True]) == 2
>>> count([True,False,True])
",0,"[""Test 0 <class 'NameError'>: name 'count' is not defined"", ""Test 1 <class 'NameError'>: name 'count' is not defined"", ""Test 2 <class 'NameError'>: name 'count' is not defined""]"
106,"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']","def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","Write a function to add the given list to the given tuples.
>>> Example: add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
>>> Example: add_lists([], (9, 10)) == (9, 10)
>>> Example: add_lists([], ()) == ()
>>> Example: add_lists([1, 2, 3], (4, 5",0,"[""Test 0 <class 'NameError'>: name 'add_lists' is not defined"", ""Test 1 <class 'NameError'>: name 'add_lists' is not defined"", ""Test 2 <class 'NameError'>: name 'add_lists' is not defined""]"
107,"['assert count_Hexadecimal(10,15) == 6', 'assert count_Hexadecimal(2,4) == 0', 'assert count_Hexadecimal(15,16) == 1']","def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","Write a python function to count hexadecimal numbers for a given range.
>>> Example: count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
108,"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']","import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.
>>> Example: merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
>>>

def merge_sorted_list(lst1, lst2, lst3):
    """"""
    Merge sorted lists into a single sorted list.
    """"""
    merged_list = []
    while lst1 and lst2:
        if lst1[0] < lst2[",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 7)""]"
109,"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']","def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","Write a python function to find the count of rotations of a binary string with odd value.
>>> Example: odd_Equivalent(""011001"",6) == 3
>>> Explanation: The string ""011001"" has 3 rotations with odd value.

""""""

def odd_Equivalent(s,k):
    count = 0
    for i in range(len(s)):
        if s[i] == '1':
            count += 1
        if count == k:
            return i
    return -1

print(odd_Equivalent(""011001"",6))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
110,"['assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]']","def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","Write a function to extract the ranges that are missing from the given list with the given start range and end range values.
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example:",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
111,"['assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]', 'assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]', 'assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]']","def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","Write a function to find common elements in given nested lists. * list item * list item * list item * list item
>>> Example: common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
>>> Example: common_in_nested_lists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11",0,"[""Test 0 <class 'NameError'>: name 'common_in_nested_lists' is not defined"", ""Test 1 <class 'NameError'>: name 'common_in_nested_lists' is not defined"", ""Test 2 <class 'NameError'>: name 'common_in_nested_lists' is not defined""]"
112,"['assert perimeter(2,4) == 12', 'assert perimeter(1,2) == 6', 'assert perimeter(3,1) == 8']","def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","Write a python function to find the perimeter of a cylinder.
>>> Example: perimeter(2,4) == 12

def perimeter(r,h):
    return 2*r*h + 2*r*2

>>> print(perimeter(2,4))
12

>>> print(per",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
113,"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']","def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","Write a function to check if a string represents an integer or not.
>>> Example: check_integer(""python"")==False
>>> check_integer(""-2"")==True
>>> check_integer(""2a"")==False
>>> check_integer(""2"")==True
>>> check_integer(""2.5"")==False
>>> check_integer(""2.5a"")==False
>>> check_integer(""2.5b"")==False
>>> check_integer(""2.5c"")==False
>>> check_integer(""2.5d"")==False
>>> check_integer(""2.5e"")==False
>>> check_integer(""2.5f"")==False
>>> check_integer(""2.5g"")==False
>>> check_integer(""2.5h"")==False
>>> check_integer(""2.5i"")==False
>>> check_integer(""2.5j"")==False
>>> check_integer(""2.5k"")==False
>>> check_integer(""2.5l"")==False
>>> check_integer(""2.5m"")==False
>>> check_integer(""2.5n"")==False
>>> check_integer(""2.5o"")==False
>>> check_integer(""2.5p"")==False
>>> check_integer(""2.5q"")==False
>>> check_integer(""2.5r"")==False
>>> check_integer(""2.5s"")==False
>>> check_integer(""2.5t"")==False
>>> check_integer(""2.",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
11,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""

""""""

def remove_Occ(str, ch):
    return str.replace(ch, """")

print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""o""))
print(remove_Occ(""hello"", ""h""))
print(remove_Occ(""hello"", ""e""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
12,"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","Write a function to sort a given matrix in ascending order according to the sum of its rows.
>>> Example: sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
",0,"[""Test 0 <class 'NameError'>: name 'sort_matrix' is not defined"", ""Test 1 <class 'NameError'>: name 'sort_matrix' is not defined"", ""Test 2 <class 'NameError'>: name 'sort_matrix' is not defined""]"
13,"['assert count_common([\'red\',\'green\',\'black\',\'pink\',\'black\',\'white\',\'black\',\'eyes\',\'white\',\'black\',\'orange\',\'pink\',\'pink\',\'red\',\'red\',\'white\',\'orange\',\'white\',""black"",\'pink\',\'green\',\'green\',\'pink\',\'green\',\'pink\',\'white\',\'orange\',""orange"",\'red\']) == [(\'pink\', 6), (\'black\', 5), (\'white\', 5), (\'red\', 4)]', ""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"", ""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]""]","from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","Write a function to count the most common words in a dictionary.
>>> Example: count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]

""""""

def count_common(words):
    """"""
    >>> count_common(['red','green','black','pink','black','white','black','eyes','white",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 3)""]"
14,"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","Write a python function to find the volume of a triangular prism.
>>> Example: find_Volume(10,8,6) == 240

""""""

def find_Volume(a,b,c):
    return (a*b*c)/3",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
15,"['assert split_lowerstring(""AbCd"")==[\'bC\',\'d\']', 'assert split_lowerstring(""Python"")==[\'y\', \'t\', \'h\', \'o\', \'n\']', 'assert split_lowerstring(""Programming"")==[\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\']']","import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","Write a function to split a string at lowercase letters.
>>> Example: split_lowerstring(""AbCd"")==['bC','d']
>>> Example: split_lowerstring(""abcd"")==['ab','cd']
>>> Example: split_lowerstring(""abcd"")==['ab','cd']
>>> Example: split_lowerstring(""abcd"")==['ab",0,"[""<class 'NameError'>: name 'b' is not defined""]"
16,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match",0,"[""<class 'NameError'>: name 'h' is not defined""]"
17,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def square_perimeter(a):
  perimeter=4*a
  return perimeter","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40

""""""

def square_perimeter(a):
    return a*4

print(square_perimeter(10))

""""""
Write a function",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 7)""]"
11,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""

""""""

def remove_Occ(str, ch):
    return str.replace(ch, """")

print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""o""))
print(remove_Occ(""hello"", ""h""))
print(remove_Occ(""hello"", ""e""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
print(remove_Occ(""hello"", ""l""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
16,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_cbbb"")==('Found a match",0,"[""<class 'NameError'>: name 'h' is not defined""]"
17,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def square_perimeter(a):
  perimeter=4*a
  return perimeter","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40

""""""

def square_perimeter(a):
    return a*4

print(square_perimeter(10))

""""""
Write a function",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 7)""]"
18,"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\' ']","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","Write a function to remove characters from the first string which are present in the second string.
>>> Example: remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'

'''

def remove_dirty_chars(string1, string2):
    return ''.join(c for c in string1 if c not in string2)

print(remove_dirty_chars(""probasscurve"", ""pros""))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
19,"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","Write a function to find whether a given array of integers contains any duplicate element.
>>> Example: test_duplicate(([1,2,3,4,5]))==False
>>> Example: test_duplicate(([1,2,3,4,5,1]))==True
>>> Example: test_duplicate(([1,2,3,4,5,2]))==True
>>> Example: test_duplicate(([1,2,3,4,5,2",0,"[""Test 0 <class 'NameError'>: name 'test_duplicate' is not defined"", ""Test 1 <class 'NameError'>: name 'test_duplicate' is not defined"", ""Test 2 <class 'NameError'>: name 'test_duplicate' is not defined""]"
20,"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","Write a function to check if the given number is woodball or not.
>>> Example: is_woodall(383) == True
>>> Example: is_woodall(876) == False
""""""

def is_woodall(num):
    if num % 7 == 0 and num % 5 == 0:
        return True
    else:
        return False

print(is_woodall(383))
print(is_woodall(876))
",2,"[""Test 0 <class 'AssertionError'>: "", 'Test 1 Success', 'Test 2 Success']"
21,"['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']","def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","Write a function to find m number of multiples of n.
>>> Example: multiples_of_num(4,3)== [3,6,9,12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_of_num(4,3)
[3, 6, 9, 12]
>>> multiples_",0,"[""Test 0 <class 'NameError'>: name 'multiples_of_num' is not defined"", ""Test 1 <class 'NameError'>: name 'multiples_of_num' is not defined"", ""Test 2 <class 'NameError'>: name 'multiples_of_num' is not defined""]"
22,"['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']","def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","Write a function to find the first duplicate element in a given array of integers.
>>> Example: find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 5]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 6]))==6
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7]))==-1
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7, 7]))==7
>>> Example: find_first_duplicate(([1, 2, 3, 4, 5, 6, 7, 8]))==-1
>>> Example: find_first_duplicate(([1, 2, 3,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
23,"['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']","def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","Write a python function to find the maximum sum of elements of list in a list of lists.
>>> Example: maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
>>> maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33

""""""

def maximum_Sum(lst):
    max_sum = 0
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            max_sum = max(max_sum, lst[i][j])
    return max_sum

print(maximum_Sum([[1,2,3],[4,5,6],[10,11",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 8)""]"
24,"['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']","def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","Write a function to convert the given binary number to its decimal equivalent.
>>> Example: binary_to_decimal(100) == 4

""""""

def binary_to_decimal(binary):
    binary = str(binary)
    decimal = 0
    for i in range(len(binary)):
        decimal += int(binary[i]) * 2**(len(binary)-i-1)
    return decimal

print(binary_to_decimal(100))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
25,"['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']","def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","Write a python function to find the product of non-repeated elements in a given array.
>>> Example: find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2,3],4) == 6
>>> find_Product([1,1,2",0,"[""Test 0 <class 'NameError'>: name 'find_Product' is not defined"", ""Test 1 <class 'NameError'>: name 'find_Product' is not defined"", ""Test 2 <class 'NameError'>: name 'find_Product' is not defined""]"
26,"['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']","def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","Write a function to check if the given tuple list has all k elements.
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 5) == False
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 6) == False",0,"[""<class 'NameError'>: name 'e' is not defined""]"
27,"[""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"", ""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"", ""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']""]","import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']

# Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']

# Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters",0,"[""<class 'NameError'>: name 's' is not defined""]"
28,"['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3']","def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","Write a python function to find binomial co-efficient.
>>> Example: binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10
>>> binomial_Coeff(5,2) == 10",0,"[""Test 0 <class 'NameError'>: name 'binomial_Coeff' is not defined"", ""Test 1 <class 'NameError'>: name 'binomial_Coeff' is not defined"", ""Test 2 <class 'NameError'>: name 'binomial_Coeff' is not defined""]"
29,"['assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1', 'assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3', 'assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5']","def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","Write a python function to find the element occurring odd number of times.
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],3) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],1) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],0) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],5) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],6) == -1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
>>> Example: get_Odd_Occurrence([1,2,3,1,2,3,1],8) == -1
>>> Example: get_Odd_Occurrence([1,2,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
30,"['assert count_Substring_With_Equal_Ends(""abc"") == 3', 'assert count_Substring_With_Equal_Ends(""abcda"") == 6', 'assert count_Substring_With_Equal_Ends(""ab"") == 2']","def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","Write a python function to count all the substrings starting and ending with same characters.
>>> Example: count_Substring_With_Equal_Ends(""abc"") == 3
>>> count_Substring_With_Equal_Ends(""abc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_Ends(""abcabcabcabcabcabcabc"") == 3
>>> count_Substring_With_Equal_End",0,"[""<class 'NameError'>: name 'd' is not defined""]"
31,"['assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]']","def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],4)==[5, 7, 1, 3]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[5, 7, 1, 3, 4]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],6)==[5, 7, 1, 3, 4, 6]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],7)==[5, 7, 1, 3, 4, 6, 8]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],8)==[5, 7, 1, 3, 4, 6, 8, 9]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],9)==[5, 7, 1, 3, 4, 6, 8, 9, 11]
>>> Example: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
32,"['assert max_Prime_Factors(15) == 5', 'assert max_Prime_Factors(6) == 3', 'assert max_Prime_Factors(2) == 2']","import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","Write a python function to find the largest prime factor of a given number.
>>> Example: max_Prime_Factors(15) == 5
>>> Example: max_Prime_Factors(20) == 5
>>> Example: max_Prime_Factors(25) == 5
>>> Example: max_Prime_Factors(30) == 5
>>> Example: max_Prime_Factors(35) == 5
>>> Example: max_Prime_Factors(40) == 5
>>> Example: max_Prime_Factors(45) == 5
>>> Example: max_Prime_Factors(50) == 5
>>> Example: max_Prime_Factors(55) == 5
>>> Example: max_Prime_Factors(60) == 5
>>> Example: max_Prime_Factors(65) == 5
>>> Example: max_Prime_Factors(70) == 5
>>> Example: max_Prime_Factors(75) == 5
>>> Example: max_Prime_Factors(80) == 5
>>> Example: max_Prime_Factors(85) == 5
>>> Example: max_Prime_Factors(90) == 5
>>> Example: max_Prime_Factors(95) == 5
>>> Example: max_Prime_Factors(100) == 5
>>> Example: max_Prime_Factors(105) == 5
>>> Example: max_Prime_Factors(110) == 5
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
33,"['assert decimal_To_Binary(10) == 1010', 'assert decimal_To_Binary(1) == 1', 'assert decimal_To_Binary(20) == 10100']","def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","Write a python function to convert a decimal number to binary number.
>>> Example: decimal_To_Binary(10) == 1010

""""""

def decimal_To_Binary(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary

decimal = int(input(""Enter a decimal number: ""))
print(decimal_To_Binary(decimal))
",0,"[""<class 'ValueError'>: invalid literal for int() with base 10: ''""]"
34,"['assert find_missing([1,2,3,5],4) == 4', 'assert find_missing([1,3,4,5],4) == 2', 'assert find_missing([1,2,3,5,6,7],5) == 4']","def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","Write a python function to find the missing number in a sorted array.
>>> Example: find_missing([1,2,3,5],4) == 4
>>> Example: find_missing([1,2,3,5],6) == 4
>>> Example: find_missing([1,2,3,5],7) == 4
>>> Example: find_missing([1,2,3,5],8) == 4
>>> Example: find_missing([1,2,3,5],9) == 4
>>> Example: find_missing([1,2,3,5],10) == 4
>>> Example: find_missing([1,2,3,5],11) == 4
>>> Example: find_missing([1,2,3,5],12) == 4
>>> Example: find_missing([1,2,3,5],13) == 4
>>> Example: find_missing([1,2,3,5],14) == 4
>>> Example: find_missing([1,2,3,5],15) == 4
>>> Example: find_missing([1,2,3,5],16) == 4
>>> Example: find_missing([1,2,3,5],17) == 4
>>> Example: find_missing([1,2,3,5],18) == 4
>>> Example: find_missing([1,2,3,5],19) == 4
>>> Example: find_missing([1,2,3,5],20) == 4
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
35,"['assert find_rect_num(4) == 20', 'assert find_rect_num(5) == 30', 'assert find_rect_num(6) == 42']","def find_rect_num(n):
  return n*(n + 1) ","Write a function to find the n-th rectangular number.
>>> Example: find_rect_num(4) == 20
""""""

def find_rect_num(n):
    return",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
36,"['assert find_Nth_Digit(1,2,1) == 5', 'assert find_Nth_Digit(3,5,1) == 6', 'assert find_Nth_Digit(5,6,5) == 3']","def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","Write a python function to find the nth digit in the proper fraction of two given numbers.
>>> Example: find_Nth_Digit(1,2,1) == 5
>>> Example: find_Nth_Digit(1,2,2) == 0
>>> Example: find_Nth_Digit(1,2,3) == 1
>>> Example: find_Nth_Digit(1,2,4) == 0
>>> Example: find_Nth_Digit(1,2,5) == 1
>>> Example: find_Nth_Digit(1,2,6) == 0
>>> Example: find_Nth_Digit(1,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
37,"[""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"", ""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']""]","def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","Write a function to sort a given mixed list of integers and strings.
>>> Example: sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green','red', 'white']
True
>>> Example: sort_mixed_list([1,2,3,4,5,6,7,8,9,10])==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
True
>>> Example: sort_mixed_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==[1, 2, 3, 4, 5, 6, 7, 8, 9,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
38,"['assert div_even_odd([1,3,5,7,4,1,6,8])==4', 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert div_even_odd([1,5,7,9,10])==10']","def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","Write a function to find the division of first even and odd number of a given list.
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==4
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==2
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,4,1,6,8])==0
>>> Example: div_even_odd([1,3,5,7,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
39,"['assert rearange_string(""aab"")==(\'aba\')', 'assert rearange_string(""aabb"")==(\'abab\')', 'assert rearange_string(""abccdd"")==(\'cdabcd\')']","import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
>>> Example: rearange_string(""aab"")==('aba')
>>> Example: rearange_string(""aaab"")==('abaa')
>>> Example: rearange_string(""aabb"")==('abab')
>>> Example: rearange_string(""abc"")==('abc')
>>> Example: rearange_string(""a"")==('a')
>>> Example: rearange_string("""")==('')
>>> Example: rearange_string(""aa"")==('aa')
>>> Example: rearange_string(""aab"")==('aab')
>>> Example: rearange_string(""aabb"")==('aabb')
>>> Example: rearange_string(""aabbb"")==('aabbb')
>>> Example: rearange_string(""aabbbb"")==('aabbbb')
>>> Example: rearange_string(""aabbbbb"")==('aabbbbb')
>>> Example: rearange_string(""aabbbbbb"")==('aabbbbbb')
>>> Example: rearange_string(""aabbbbbbb"")==('aabbbbbbb')
>>> Example: rearange_string(""aabbbbbbbb"")==('aabbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbb"")==('aabbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbb"")==('aabbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbb"")==('aabbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbb"")==('aabbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbb"")==('aabbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbbb"")==('aabbbbbbbbbbbbbbbbb')
>>> Example: rearange_string(""aabbbbbbbbbbbbbbbbbb"")==('aabb",0,"[""<class 'NameError'>: name 'b' is not defined""]"
40,"['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']","from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","Write a function to find frequency of the elements in a given list of lists using collections module.
>>> Example: freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})

'''

from collections import Counter

def freq_element(lst):
    return Counter(lst)

print(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7,",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
41,"['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']","def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","Write a function to filter even numbers using lambda function.
>>> Example: filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
>>> Example: filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
42,"['assert find_Sum([1,2,3,1,1,4,5,6],8) == 3', 'assert find_Sum([1,2,3,1,1],5) == 3', 'assert find_Sum([1,1,2],3) == 2']","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","Write a python function to find the sum of repeated elements in a given array.
>>> Example: find_Sum([1,2,3,1,1,4,5,6],8) == 3
>>> find_Sum([1,2,3,1,1,4,5,6],8) == 3
>>> find_Sum",0,"[""<class 'NameError'>: name 'm' is not defined""]"
43,"['assert text_match(""aab_cbbbc"") == \'Found a match!\'', 'assert text_match(""aab_Abbbc"") == \'Not matched!\'', 'assert text_match(""Aaab_abbbc"") == \'Not matched!\'']","import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore using regex.
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example: text_match(""aab_cbbbc"") == 'Found a match!'
>>> Example",0,"[""<class 'NameError'>: name 'e' is not defined""]"
44,"['assert text_match_string("" python"")==(\'Not matched!\')', 'assert text_match_string(""python"")==(\'Found a match!\')', 'assert text_match_string(""  lang"")==(\'Not matched!\')']","import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","Write a function that matches a word at the beginning of a string.
>>> Example: text_match_string("" python"")==('Not matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!')
>>> Example: text_match_string(""python"")==('matched!",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
45,"['assert get_gcd([2, 4, 6, 8, 16]) == 2', 'assert get_gcd([1, 2, 3]) == 1', 'assert get_gcd([2, 4, 6, 8]) == 2 ']","def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","Write a function to find the gcd of the given array elements.
>>> Example: get_gcd([2, 4, 6, 8, 16]) == 2

""""""

def get_gcd(arr):
    if len(arr) == 1:
        return arr[0]
    else:
        return get_gcd(arr[1:])

print(get_gcd([2, 4, 6, 8, 16]))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
46,"['assert test_distinct([1,5,7,9]) == True', 'assert test_distinct([2,4,5,5,7,9]) == False', 'assert test_distinct([1,2,3]) == True']","def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","Write a python function to determine whether all the numbers are different from each other are not.
>>> Example: test_distinct([1,5,7,9]) == True
>>> Example: test_distinct([1,5,7,9]) == False
>>> Example: test_distinct([1,5,7,9]) == True
>>> Example: test_distinct([1,5,7,9]) == False
>>> Example: test_distinct([1",0,"[""Test 0 <class 'NameError'>: name 'test_distinct' is not defined"", ""Test 1 <class 'NameError'>: name 'test_distinct' is not defined"", ""Test 2 <class 'NameError'>: name 'test_distinct' is not defined""]"
47,"['assert compute_Last_Digit(2,4) == 2', 'assert compute_Last_Digit(6,8) == 6', 'assert compute_Last_Digit(1,2) == 2']","def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","Write a python function to find the last digit when factorial of a divides factorial of b.
>>> Example: compute_Last_Digit(2,4) == 2
>>> compute_Last_Digit(2,4) == 2
>>> compute_Last_Digit(3,4) == 1
>>> compute_Last_Digit(4,4) == 4
>>> compute_Last_Digit(5,4) == 1
>>> compute_Last_Digit(6,4) == 6
>>> compute_Last_Digit(7,4) == 1
>>> compute_Last_Digit(8,4) == 8
>>> compute_Last_Digit(9,4) == 9
>>> compute_Last_Digit(10,4) == 1
>>> compute_Last_Digit(11,4) == 1
>>> compute_Last_Digit(12,4) == 1
>>> compute_Last_Digit(13,4) == 1
>>> compute_Last_Digit(14,4) == 1
>>> compute_Last_Digit(15,4) == 1
>>> compute_Last_Digit(16,4) == 1
>>>",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
48,"['assert odd_bit_set_number(10) == 15', 'assert odd_bit_set_number(20) == 21', 'assert odd_bit_set_number(30) == 31']","def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","Write a python function to set all odd bits of a given number.
>>> Example: odd_bit_set_number(10) == 15
>>> odd_bit_set_number(11) == 11
>>> odd_bit_set_number(12) == 11
>>> odd_bit_set_number(13) == 11
>>> odd_bit_set_number(14) == 11
>>> odd_bit_set_number(15) == 15
>>> odd_bit_set_number(16) == 15
>>> odd_bit_set_number(17) == 15
>>> odd_bit_set_number(18) == 15
>>> odd_bit_set_number(19) == 15
>>> odd_bit_set_number(20) == 15
>>> odd_bit_set_number(21) == 15
>>> odd_bit_set_number(22) == 15
>>> odd_",0,"[""Test 0 <class 'NameError'>: name 'odd_bit_set_number' is not defined"", ""Test 1 <class 'NameError'>: name 'odd_bit_set_number' is not defined"", ""Test 2 <class 'NameError'>: name 'odd_bit_set_number' is not defined""]"
49,"['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]']","def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","Write a function to extract every first or specified element from a given two-dimensional list.
>>> Example: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
>>> Example: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
50,"['assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])', 'assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])', 'assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])']","def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","Write a function to find the list with minimum length using lambda function.
>>> Example: min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [5, 7, 9])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [5, 7, 9])
>>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13",0,"[""Test 0 <class 'NameError'>: name 'min_length_list' is not defined"", ""Test 1 <class 'NameError'>: name 'min_length_list' is not defined"", ""Test 2 <class 'NameError'>: name 'min_length_list' is not defined""]"
51,"['assert check_equilateral(6,8,12)==False ', 'assert check_equilateral(6,6,12)==False', 'assert check_equilateral(6,6,6)==True']","def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","Write a function to print check if the triangle is equilateral or not.
>>> Example: check_equilateral(6,8,12)==False 
>>> check_equilateral(6,8,12)==True

""""""

def check_equilateral(a,b,c):
    if a==b and b==c and a==c:
        return True
    else:
        return False
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
52,"['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']","def parallelogram_area(b,h):
  area=b*h
  return area","Write a function to caluclate area of a parallelogram.
>>> Example: parallelogram_area(10,20)==200
>>> Expected Output: 200

""""""

def parallelogram_area(a,b):
    ",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
53,"['assert check_Equality(""abcda"") == ""Equal""', 'assert check_Equality(""ab"") == ""Not Equal""', 'assert check_Equality(""mad"") == ""Not Equal""']","def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","Write a python function to check whether the first and last characters of a given string are equal or not.
>>> Example: check_Equality(""abcda"") == ""Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality(""abcda"") == ""Not Equal""
>>> Example: check_Equality",0,"[""<class 'NameError'>: name 'y' is not defined""]"
54,"['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']","def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","Write a function to sort the given array by using counting sort.
>>> Example: counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]

""""""

def counting_sort(arr):
    """"""
    >>> counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]
    True
    """"""
    n = len(arr)
    count = [0] * (max(arr) + 1)
    for i in arr:
        count[i] += 1
    for i in range(1, len(count)):
        count[i] += count[i - 1]
    output = [0] * n
    for i in range(n - 1, -1, -1):
        output[count[arr[i]] - 1] = arr[i]
        count[arr[i]] -= 1
    return output

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
55,"['assert tn_gp(1,5,2)==16', 'assert tn_gp(1,5,4)==256', 'assert tn_gp(2,6,3)==486']","import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","Write a function to find t-nth term of geometric series.
>>> Example: tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16
>>> tn_gp(1,5,2)==16",0,"[""Test 0 <class 'NameError'>: name 'tn_gp' is not defined"", ""Test 1 <class 'NameError'>: name 'tn_gp' is not defined"", ""Test 2 <class 'NameError'>: name 'tn_gp' is not defined""]"
56,"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']","def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","Write a python function to check if a given number is one less than twice its reverse.
>>> Example: check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(70) == True
>>> check(70) == False
>>> check(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
57,"['assert find_Max_Num([1,2,3],3) == 321', 'assert find_Max_Num([4,5,6,1],4) == 6541', 'assert find_Max_Num([1,2,3,9],4) == 9321']","def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","Write a python function to find the largest number that can be formed with the given digits.
>>> Example: find_Max_Num([1,2,3],3) == 321
>>> Example: find_Max_Num([1,2,3],4) == -1
>>> Example: find_Max_Num([1,2,3],5) == -1
>>> Example: find_Max_Num([1,2,3],6) == -1
>>> Example: find_Max_Num([1,2,3],7) == -1
>>> Example: find_Max_Num([1,2,3],8) == -1
>>> Example: find_Max_Num([1,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
58,"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False']","def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","Write a python function to check whether the given two integers have opposite sign or not.
>>> Example: opposite_Signs(1,-2) == True
>>> opposite_Signs(1,2) == False
>>> opposite_Signs(1",0,"[""Test 0 <class 'NameError'>: name 'opposite_Signs' is not defined"", ""Test 1 <class 'NameError'>: name 'opposite_Signs' is not defined"", ""Test 2 <class 'NameError'>: name 'opposite_Signs' is not defined""]"
59,"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']","def is_octagonal(n): 
	return 3 * n * n - 2 * n ","Write a function to find the nth octagonal number.
>>> Example: is_octagonal(5) == 65
>>> True

""""""

def is_octagonal(n):
    return n * (3 *",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
60,"['assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5', 'assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4', 'assert max_len_sub([9, 11, 13, 15, 18], 5) == 1']","def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.
>>> Example: max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 7) == 4
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 6) == 3
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 5) == 2
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 4) == 0
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 3) == 2
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 2) == 1
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 1) == 0
>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 0) == 0
>>> max_len_sub([2, 5, 6, 3, 7",0,"[""Test 0 <class 'NameError'>: name 'max_len_sub' is not defined"", ""Test 1 <class 'NameError'>: name 'max_len_sub' is not defined"", ""Test 2 <class 'NameError'>: name 'max_len_sub' is not defined""]"
61,"[""assert count_Substrings('112112',6) == 6"", ""assert count_Substrings('111',3) == 6"", ""assert count_Substrings('1101112',7) == 12""]","from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","Write a python function to count number of substrings with the sum of digits equal to their length.
>>> Example: count_Substrings('112112',6) == 6
>>> count_Substrings('112112',6) == 6
>>> count_Substrings('112112',5) == 5
>>> count_Substrings('112112',4) == 4
>>> count_Substrings('112112',3) == 3
>>> count_Substrings('112112',2) == 2
>>> count_Substrings('112112',1) == 1
>>> count_Substrings('112112',0) == 0
>>> count_Substrings('112112',-1) == 0
>>> count_Substrings('112112',-2) == 0
>>> count_Substrings('112112',-3) == 0
>>> count_Substrings('112112',-4) == 0
>>> count_Substrings('112112',-5) == 0
>>> count_Substrings('112112',-6) == 0
>>> count_Substrings('112112',-7) == 0
>>> count_Substrings('112112',-8) == 0
>>> count_Substrings('112112',-9) == 0
>>> count_Substrings('112112',-10",0,"[""Test 0 <class 'NameError'>: name 'count_Substrings' is not defined"", ""Test 1 <class 'NameError'>: name 'count_Substrings' is not defined"", ""Test 2 <class 'NameError'>: name 'count_Substrings' is not defined""]"
62,"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']","def smallest_num(xs):
  return min(xs)
","Write a python function to find smallest number in a list.
>>> Example: smallest_num([10, 20, 1, 45, 99]) == 1
>>> smallest_num([10",0,"[""Test 0 <class 'NameError'>: name 'smallest_num' is not defined"", ""Test 1 <class 'NameError'>: name 'smallest_num' is not defined"", ""Test 2 <class 'NameError'>: name 'smallest_num' is not defined""]"
63,"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']","def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","Write a function to find the maximum difference between available pairs in the given tuple list.
>>> Example: max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
>>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
""""""

def max_difference(tuple_list):
    """"""
    >>> max_difference([(3, 5), (",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 3)""]"
64,"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]","def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","Write a function to sort a list of tuples using lambda.
>>> Example: subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
True

""""""

def subject_marks(lst):
    return sorted(lst, key=lambda x: x[1], reverse=True)

print(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
65,"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']","def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","Write a function of recursion list sum.
>>> Example: recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6]))==21
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))==45
>>> Example: recursive_list_sum(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
66,"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']","def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","Write a python function to count positive numbers in a list.
>>> Example: pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2,3,-4]) == 2
>>> pos_count([1,-2",0,"[""Test 0 <class 'NameError'>: name 'pos_count' is not defined"", ""Test 1 <class 'NameError'>: name 'pos_count' is not defined"", ""Test 2 <class 'NameError'>: name 'pos_count' is not defined""]"
67,"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']","def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","Write a function to find the number of ways to partition a set of bell numbers.
>>> Example: bell_number(2)==2
>>> Example: bell_number(3)==3
>>> Example: bell_number(4)==5
>>> Example: bell_number(5)==8
>>> Example: bell_number(6)==13
>>> Example: bell_number(7)==21
>>> Example: bell_number(8)==34
>>> Example: bell_number(9)==55
>>> Example: bell_number(10)==89
>>> Example: bell_number(11)==144
>>> Example: bell_number(12)==233
>>> Example: bell_number(13)==377
>>> Example: bell_number(14)==610
>>> Example: bell_number(15)==987
>>> Example: bell_number(16)==1634
>>> Example: bell_number(17)==2657
>>> Example: bell_number(18)==4181
>>> Example: bell_number(19)==62270
>>> Example: bell_number(20)==92274
>>> Example: bell_number(21)==138561
>>> Example: bell_number(22)==248531
>>> Example: bell_number(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
68,"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']","def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","Write a python function to check whether the given array is monotonic or not.
>>> Example: is_Monotonic([6, 5, 4, 4]) == True
>>> Example: is_Monotonic([6, 5, 4, 1]) == False
>>> Example: is_Monotonic([1, 1, 1]) == True
>>> Example: is_Monotonic([1, 1, 1, 1]) == True
>>> Example: is_Monotonic([1, 1, 1, 2]) == False
>>> Example: is_Monotonic([1, 2, 1]) == False
>>> Example: is_Monotonic([1, 1, 2]) ==",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
69,"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']","def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","Write a function to check whether a list contains the given sublist or not.
>>> Example: is_sublist([2,4,3,5,7],[3,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5])==True
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7])==True
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,5,7,7,7,7,7,7,7])==False
>>> Example: is_sublist([2,4,3,5,7],[3,7,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
70,"[""assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"", ""assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'"", ""assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'""]","def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","Write a function to find whether all the given tuples have equal length or not.
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 2) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 1) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 0) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 4) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 5) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 6) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33), (44, 55, 66)], 7) == 'All tuples have same length'
>>> Example: get_equal([(11, 22, 33),",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
71,"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']","def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","Write a function to sort a list of elements using comb sort.
>>> Example: comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]

""""""

def comb_sort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap!= 1 or swapped:
        gap = int(gap / 1.3)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True
    return arr

print(comb_sort([5, 15, 37, 25, 79]))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
72,"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']","def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","Write a python function to check whether the given number can be represented as difference of two squares or not.
>>> Example: dif_Square(5) == True
>>> dif_Square(6) == False
>>> dif_Square(7) == True
>>> dif_Square(8) == False
>>> dif_Square(9) == True
>>> d",0,"[""<class 'NameError'>: name 'd' is not defined""]"
73,"[""assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']"", ""assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']"", ""assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']""]","import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","Write a function to split the given string with multiple delimiters by using regex.
>>> Example: multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']

'''

import re

def multiple_split(string):",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 1)""]"
74,"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False ', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False ']","def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","Write a function to check whether it follows the sequence given in the patterns array.
>>> Example: is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True 
>>> Example: is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""c""])==False

""""""

def is_samepatterns(patterns, patterns_to_check):
    if len(patterns)!= len(patterns_to_check):
        return False
    for i in range(len(patterns)):
        if patterns[i]!= patterns_to_check[i]:
            return False
    return True

print(is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""]))
print(is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""c""]))
",2,"[""Test 0 <class 'AssertionError'>: "", 'Test 1 Success', 'Test 2 Success']"
75,"[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"", ""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'"", ""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'""]","def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","Write a function to find tuples which have all elements divisible by k from the given list of tuples.
>>> Example: find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
>>> Example: find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7) == '[(7, 9, 6), (12, 18, 21)]'
>>> Example: find_tuples",0,"[""<class 'NameError'>: name 's' is not defined""]"
76,"['assert count_Squares(4,3) == 20', 'assert count_Squares(2,2) == 5', 'assert count_Squares(1,1) == 1']","def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","Write a python function to count the number of squares in a rectangle.
>>> Example: count_Squares(4,3) == 20
>>> Example: count_Squares(5,5) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25
>>> Example: count_Squares(10,10) == 25",0,"[""Test 0 <class 'NameError'>: name 'count_Squares' is not defined"", ""Test 1 <class 'NameError'>: name 'count_Squares' is not defined"", ""Test 2 <class 'NameError'>: name 'count_Squares' is not defined""]"
77,"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']","def is_Diff(n): 
    return (n % 11 == 0) ","Write a python function to find the difference between sum of even and odd digits.
>>> Example: is_Diff (12345) == False
>>> Example: is_Diff (1234) == True
",0,"[""Test 0 <class 'NameError'>: name 'is_Diff' is not defined"", ""Test 1 <class 'NameError'>: name 'is_Diff' is not defined"", ""Test 2 <class 'NameError'>: name 'is_Diff' is not defined""]"
78,"['assert count_With_Odd_SetBits(5) == 3', 'assert count_With_Odd_SetBits(10) == 5', 'assert count_With_Odd_SetBits(15) == 8']","def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","Write a python function to find number of integers with odd number of set bits.
>>> Example: count_With_Odd_SetBits(5) == 3
>>> count_With_Odd_SetBits(5) == 2
>>> count_With_Odd_SetBits(6) == 1
>>> count_With_Odd_SetBits(7) == 0
>>> count_With_Odd_SetBits(8) == 0
>>> count_With_Odd_SetBits(9) == 1
>>> count_With_Odd_SetBits(10) == 2
>>> count_With_Odd_SetBits(11) == 3
>>> count_With_Odd_SetBits(12) == 4
>>> count_With_Odd_SetBits(13) == 5
>>> count_With",0,"[""<class 'NameError'>: name 'h' is not defined""]"
79,"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']","def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","Write a python function to check whether the length of the word is odd or not.
>>> Example: word_len(""Hadoop"") == False
>>> word_len(""Hadoop"") == True
>>> word_len(""Python"") == True
>>> word_len("""") == False
>>> word_len(""h"") == False
>>> word_len(""hh"") == False
>>> word_len(""Hi"") == False
>>> word_len(""HiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHi",0,"[""Test 0 <class 'NameError'>: name 'word_len' is not defined"", ""Test 1 <class 'NameError'>: name 'word_len' is not defined"", ""Test 2 <class 'NameError'>: name 'word_len' is not defined""]"
80,"['assert tetrahedral_number(5) == 35.0', 'assert tetrahedral_number(6) == 56.0', 'assert tetrahedral_number(7) == 84.0']","def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","Write a function to find the nth tetrahedral number.
>>> Example: tetrahedral_number(5) == 35.0
>>> tetrahedral_number(10) == 220.0
>>> tetrahedral_number(20) == 46867749.0
""""""

",0,"[""Test 0 <class 'NameError'>: name 'tetrahedral_number' is not defined"", ""Test 1 <class 'NameError'>: name 'tetrahedral_number' is not defined"", ""Test 2 <class 'NameError'>: name 'tetrahedral_number' is not defined""]"
81,"['assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]', 'assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]', 'assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]']","def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","Write a function to zip the two given tuples.
>>> Example: zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]

""""""

def zip_tuples(tuple1, tuple2):
    return list(zip(tuple1, tuple2))

print(zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6)))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
82,"['assert volume_sphere(10)==4188.790204786391', 'assert volume_sphere(25)==65449.84694978735', 'assert volume_sphere(20)==33510.32163829113']","import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","Write a function to find the volume of a sphere.
>>> Example: volume_sphere(10)==4188.790204786391
>>> Expected Output:
>>> 4188.790204786391

""""""

# Solution

def volume_sphere(radius):
    return (4/3)*(3.14159)*(radius**",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 2)""]"
83,"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']","def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","Write a python function to find the character made by adding all the characters of the given string.
>>> Example: get_Char(""abc"") == ""f""
>>> Example: get_Char(""abcdef"") == ""f""
>>> Example: get_Char(""abcdefgh"") == ""f""
>>> Example: get_Char(""abcdefghi"") == ""f""
>>> Example: get_Char(""abcdefghij"") == ""f""
>>> Example: get_Char(""abcdefghijk"") == ""f""
>>> Example: get_Char(""abcdefghijkl"") == ""f""
>>> Example: get_Char(""abcdefghijklmn"") == ""f""
>>> Example: get_Char(""abcdefghijklmnop"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopq"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopqr"") == ""f""
>>> Example: get_Char(""abcdefghijklmnopqrst"") == ""f""
>>> Example: get_Char(""abcdefgh",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
84,"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']","def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","Write a function to find the n-th number in newman conway sequence.
>>> Example: sequence(10) == 6

""""""

def sequence(n):
    if n == 1:
        return 1
    else:
        return sequence(n-1) + sequence(n-2)

print(sequence(10))
",0,"[""<class 'RecursionError'>: maximum recursion depth exceeded in comparison""]"
85,"['assert surfacearea_sphere(10)==1256.6370614359173', 'assert surfacearea_sphere(15)==2827.4333882308138', 'assert surfacearea_sphere(20)==5026.548245743669']","import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","Write a function to find the surface area of a sphere.
>>> Example: surfacearea_sphere(10)==1256.6370614359173
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
",0,"[""Test 0 <class 'NameError'>: name 'surfacearea_sphere' is not defined"", ""Test 1 <class 'NameError'>: name 'surfacearea_sphere' is not defined"", ""Test 2 <class 'NameError'>: name 'surfacearea_sphere' is not defined""]"
86,"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']","def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","Write a function to find nth centered hexagonal number.
>>> Example: centered_hexagonal_number(10) == 271
""""""

def centered_hexagonal_number(n):
    return (n*(3*n-1))//2

print(centered_hex",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
87,"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']","import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","Write a function to merge three dictionaries into a single expression.
>>> Example: merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
True
>>> Example: merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", """,0,"[""<class 'SyntaxError'>: EOL while scanning string literal (<string>, line 1)""]"
88,"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ']","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","Write a function to get the frequency of the elements in a list.
>>> Example: freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 

'''

def freq_count(lst):
    freq = {}
    for i in lst:
        if i",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
89,"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']","def closest_num(N):
  return (N - 1)","Write a function to find the closest smaller number than n.
>>> Example: closest_num(11) == 10
>>> closest_num(10) == 9
>>> closest",0,"[""<class 'NameError'>: name 't' is not defined""]"
90,"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']","def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","Write a python function to find the length of the longest word.
>>> Example: len_log([""python"",""PHP"",""bigdata""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++"",""c#""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata"",""c++"",""c#"",""c#""]) == 7
>>> Example: len_log([""python"",""PHP"",""bigdata",0,"[""<class 'NameError'>: name 'a' is not defined""]"
91,"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']","def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","Write a function to check if a substring is present in a given list of string values.
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""are"")==False
>>> Example: find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""c"")==True
>>> Example: find_substring",0,"[""<class 'NameError'>: name 'g' is not defined""]"
92,"['assert is_undulating(""1212121"") == True', 'assert is_undulating(""1991"") == False', 'assert is_undulating(""121"") == True']","def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","Write a function to check whether the given number is undulating or not.
>>> Example: is_undulating(""1212121"") == True
>>> Example: is_undulating(""1212122"") == False
>>> Example: is_undulating(""1212123"") == False
>>> Example: is_undulating(""1212124"") == False
>>> Example: is_undulating(""1212125"") == False
>>> Example: is_undulating(""1212126"") == False
>>> Example: is_undulating(""1212127"") == False
>>> Example: is_undulating(""1212128"") == False
>>> Example: is_undulating(""1212129",0,"[""Test 0 <class 'NameError'>: name 'is_undulating' is not defined"", ""Test 1 <class 'NameError'>: name 'is_undulating' is not defined"", ""Test 2 <class 'NameError'>: name 'is_undulating' is not defined""]"
93,"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']","def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","Write a function to calculate the value of 'a' to the power 'b'.
>>> Example: power(3,4) == 81
>>> power(3,4) == 81

""""""

def power(a,b):
    return a**b

print(power(3,4))

""""""
Write a function to calculate the value of 'a' to the power 'b'.
>>> Example: power(3,4) == 81
>>> power(3,4) == 81

""""""

def power(a,b",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 13)""]"
94,"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]","from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","Write a function to extract the index minimum value record from the given tuples.
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
>>> Example: index_minimum",0,"[""<class 'NameError'>: name 'm' is not defined""]"
95,"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']","def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","Write a python function to find the minimum length of sublist.
>>> Example: Find_Min_Length([[1],[1,2]]) == 1
>>> Example: Find_Min_Length([[1,2],[1,2,3]]) == 2
>>> Example: Find_Min_Length([[1,2,3],[1,2,3,4]]) == 3
>>> Example: Find_Min_",0,"[""Test 0 <class 'NameError'>: name 'Find_Min_Length' is not defined"", ""Test 1 <class 'NameError'>: name 'Find_Min_Length' is not defined"", ""Test 2 <class 'NameError'>: name 'Find_Min_Length' is not defined""]"
96,"['assert divisor(15) == 4 ', 'assert divisor(12) == 6', 'assert divisor(9) == 3']","def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","Write a python function to find the number of divisors of a given integer.
>>> Example: divisor(15) == 4 
>>> divisor(15) == 4

""""""

def divisor(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count

print(divisor(15))

""""""
",0,"[""<class 'SyntaxError'>: EOF while scanning triple-quoted string literal (<string>, line 10)""]"
97,"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","Write a function to find frequency count of list of lists.
>>> Example: frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}

""""""

def frequency_lists(lst):
    freq_dict = {}
    for i in lst:
        for j in i:
            if j in freq_dict:
                freq_dict[j] += 1
            else:
                freq_dict[j] = 1
    return freq_dict

print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))
",3,"['Test 0 Success', 'Test 1 Success', 'Test 2 Success']"
98,"['assert multiply_num((8, 2, 3, -1, 7))==-67.2', 'assert multiply_num((-10,-20,-30))==-2000.0', 'assert multiply_num((19,15,18))==1710.0']","def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","Write a function to multiply all the numbers in a list and divide with the length of the list.
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example: multiply_num((8, 2, 3, -1, 7))==-67.2
>>> Example:",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
99,"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111' ""]","def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","Write a function to convert the given decimal number to its binary equivalent.
>>> Example: decimal_to_binary(8) == '1000'

""""""

def decimal_to_binary(decimal):
    binary = """"
    while decimal > 0:
        binary = str(",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 4)""]"
100,"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","Write a function to find the next smallest palindrome of a specified number.
>>> Example: next_smallest_palindrome(99)==101
>>> next_smallest_palindrome(12)==13
>>> next_smallest_palindrome(10)==11
>>> next_smallest_palindrome(11)==12
>>> next_smallest_palindrome(1)==2
>>> next_smallest_palindrome(2)==3
>>> next_smallest_palindrome(3)==4
>>> next_smallest_palindrome(4)==5
>>> next_smallest_palindrome(5)==6
>>> next_smallest_palindrome(6)==",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
101,"['assert kth_element([12,3,5,7,19], 5, 2) == 3', 'assert kth_element([17,24,8,23], 4, 3) == 8', 'assert kth_element([16,21,25,36,4], 5, 4) == 36']","def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","Write a function to find the kth element in the given array.
>>> Example: kth_element([12,3,5,7,19], 5, 2) == 3
>>> Example: kth_element([12,3,5,7,19], 5, 3) == 5
>>> Example: kth_element([12,3,5,7,19], 5, 4) == 7
>>> Example: kth_element([12,3,5,7,19], 5, 5) == 19
>>> Example: kth_element([12,3,5,7,19], 5, 6) == -1
""""""

def kth_element(arr, k, n):
    if k > n:
        return -1
    if k == 1",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
102,"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]","def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","Write a function to convert snake case string to camel case string.
>>> Example: snake_to_camel('python_program')=='PythonProgram'
>>> Example: snake_to_camel('python_program_1')=='PythonProgram1'
>>> Example: snake_to_camel('python_program_2')=='PythonProgram2'
>>> Example: snake_to_camel('python_program_3')=='PythonProgram3'
>>> Example: snake_to_camel('python_program",0,"[""<class 'NameError'>: name 'm' is not defined""]"
103,"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","Write a function to find eulerian number a(n, m).
>>> Example: eulerian_num(3, 1) == 4
>>> eulerian_num(3, 1) == 4
>>> eulerian_num(3, 2) == 5
>>> eulerian_num(3, 3) == 6
>>> eulerian_num(3, 4) == 7
>>> eulerian_num(3, 5) == 8
>>> eulerian_num(3, 6) == 9
>>> eulerian_num(3, 7) == 10
>>> eulerian_num(3, 8) == 11
>>> eulerian_num(3, 9) == 12
>>> eulerian_num(3, 10) == 13
>>> e",0,"[""<class 'NameError'>: name 'e' is not defined""]"
104,"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']","def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result","Write a function to sort each sublist of strings in a given list of lists using lambda function.
>>> Example: sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]

""""""

def sort_sublists(lst):
    return sorted(lst, key=lambda x: x[0])

print(sort_sublists([[""",0,"[""<class 'SyntaxError'>: EOL while scanning string literal (<string>, line 4)""]"
105,"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']","def count(lst):   
    return sum(lst) ","Write a python function to count true booleans in the given list.
>>> Example: count([True,False,True]) == 2
>>> count([True,False,True])
",0,"[""Test 0 <class 'NameError'>: name 'count' is not defined"", ""Test 1 <class 'NameError'>: name 'count' is not defined"", ""Test 2 <class 'NameError'>: name 'count' is not defined""]"
106,"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']","def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","Write a function to add the given list to the given tuples.
>>> Example: add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
>>> Example: add_lists([], (9, 10)) == (9, 10)
>>> Example: add_lists([], ()) == ()
>>> Example: add_lists([1, 2, 3], (4, 5",0,"[""Test 0 <class 'NameError'>: name 'add_lists' is not defined"", ""Test 1 <class 'NameError'>: name 'add_lists' is not defined"", ""Test 2 <class 'NameError'>: name 'add_lists' is not defined""]"
107,"['assert count_Hexadecimal(10,15) == 6', 'assert count_Hexadecimal(2,4) == 0', 'assert count_Hexadecimal(15,16) == 1']","def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","Write a python function to count hexadecimal numbers for a given range.
>>> Example: count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,15) == 6
>>> count_Hexadecimal(10,",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
108,"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']","import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.
>>> Example: merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
>>>

def merge_sorted_list(lst1, lst2, lst3):
    """"""
    Merge sorted lists into a single sorted list.
    """"""
    merged_list = []
    while lst1 and lst2:
        if lst1[0] < lst2[",0,"[""<class 'SyntaxError'>: unexpected EOF while parsing (<string>, line 7)""]"
109,"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']","def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","Write a python function to find the count of rotations of a binary string with odd value.
>>> Example: odd_Equivalent(""011001"",6) == 3
>>> Explanation: The string ""011001"" has 3 rotations with odd value.

""""""

def odd_Equivalent(s,k):
    count = 0
    for i in range(len(s)):
        if s[i] == '1':
            count += 1
        if count == k:
            return i
    return -1

print(odd_Equivalent(""011001"",6))
",0,"[""Test 0 <class 'AssertionError'>: "", ""Test 1 <class 'AssertionError'>: "", ""Test 2 <class 'AssertionError'>: ""]"
110,"['assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]']","def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","Write a function to extract the ranges that are missing from the given list with the given start range and end range values.
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example: extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
>>> Example:",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
111,"['assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]', 'assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]', 'assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]']","def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","Write a function to find common elements in given nested lists. * list item * list item * list item * list item
>>> Example: common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
>>> Example: common_in_nested_lists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11",0,"[""Test 0 <class 'NameError'>: name 'common_in_nested_lists' is not defined"", ""Test 1 <class 'NameError'>: name 'common_in_nested_lists' is not defined"", ""Test 2 <class 'NameError'>: name 'common_in_nested_lists' is not defined""]"
112,"['assert perimeter(2,4) == 12', 'assert perimeter(1,2) == 6', 'assert perimeter(3,1) == 8']","def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","Write a python function to find the perimeter of a cylinder.
>>> Example: perimeter(2,4) == 12

def perimeter(r,h):
    return 2*r*h + 2*r*2

>>> print(perimeter(2,4))
12

>>> print(per",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 4)""]"
113,"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']","def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","Write a function to check if a string represents an integer or not.
>>> Example: check_integer(""python"")==False
>>> check_integer(""-2"")==True
>>> check_integer(""2a"")==False
>>> check_integer(""2"")==True
>>> check_integer(""2.5"")==False
>>> check_integer(""2.5a"")==False
>>> check_integer(""2.5b"")==False
>>> check_integer(""2.5c"")==False
>>> check_integer(""2.5d"")==False
>>> check_integer(""2.5e"")==False
>>> check_integer(""2.5f"")==False
>>> check_integer(""2.5g"")==False
>>> check_integer(""2.5h"")==False
>>> check_integer(""2.5i"")==False
>>> check_integer(""2.5j"")==False
>>> check_integer(""2.5k"")==False
>>> check_integer(""2.5l"")==False
>>> check_integer(""2.5m"")==False
>>> check_integer(""2.5n"")==False
>>> check_integer(""2.5o"")==False
>>> check_integer(""2.5p"")==False
>>> check_integer(""2.5q"")==False
>>> check_integer(""2.5r"")==False
>>> check_integer(""2.5s"")==False
>>> check_integer(""2.5t"")==False
>>> check_integer(""2.",0,"[""<class 'SyntaxError'>: invalid syntax (<string>, line 1)""]"
