task_id,text,test_list,input,true_label,prediction
11,Write a python function to remove first and last occurrence of a given character from the string.,"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""
>>> Example: remove_Occ(""abcda"",""a"") == ""bcd""
>>> Example: remove_Occ(""PHP"",""P"") == ""H""","def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","Write a python function to remove first and last occurrence of a given character from the string.
>>> Example: remove_Occ(""hello"",""l"") == ""heo""
>>> Example: remove_Occ(""abcda"",""a"") == ""bcd""
>>> Example: remove_Occ(""PHP"",""P"") == ""H""
>>> Example: remove_Occ(""PHP"",""h"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""H"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""p"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""P"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""H"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""h"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""H"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""p"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""P"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""H"") == ""PHP""
>>> Example: remove_Occ(""PHP"",""h"") == ""PHP""
>>> Example: remove_Occ(""PHP"
12,Write a function to sort a given matrix in ascending order according to the sum of its rows.,"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","Write a function to sort a given matrix in ascending order according to the sum of its rows.
>>> Example: sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
>>> Example: sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
>>> Example: sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","Write a function to sort a given matrix in ascending order according to the sum of its rows.
>>> Example: sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
>>> Example: sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
>>> Example: sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]
"
13,Write a function to count the most common words in a dictionary.,"['assert count_common([\'red\',\'green\',\'black\',\'pink\',\'black\',\'white\',\'black\',\'eyes\',\'white\',\'black\',\'orange\',\'pink\',\'pink\',\'red\',\'red\',\'white\',\'orange\',\'white\',""black"",\'pink\',\'green\',\'green\',\'pink\',\'green\',\'pink\',\'white\',\'orange\',""orange"",\'red\']) == [(\'pink\', 6), (\'black\', 5), (\'white\', 5), (\'red\', 4)]', ""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"", ""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]""]","Write a function to count the most common words in a dictionary.
>>> Example: count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
>>> Example: count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
>>> Example: count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]","from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","Write a function to count the most common words in a dictionary.
>>> Example: count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
>>> Example: count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
>>> Example: count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]
"
14,Write a python function to find the volume of a triangular prism.,"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","Write a python function to find the volume of a triangular prism.
>>> Example: find_Volume(10,8,6) == 240
>>> Example: find_Volume(3,2,2) == 6
>>> Example: find_Volume(1,2,1) == 1","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","Write a python function to find the volume of a triangular prism.
>>> Example: find_Volume(10,8,6) == 240
>>> Example: find_Volume(3,2,2) == 6
>>> Example: find_Volume(1,2,1) == 1
"
15,Write a function to split a string at lowercase letters.,"['assert split_lowerstring(""AbCd"")==[\'bC\',\'d\']', 'assert split_lowerstring(""Python"")==[\'y\', \'t\', \'h\', \'o\', \'n\']', 'assert split_lowerstring(""Programming"")==[\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\']']","Write a function to split a string at lowercase letters.
>>> Example: split_lowerstring(""AbCd"")==['bC','d']
>>> Example: split_lowerstring(""Python"")==['y', 't', 'h', 'o', 'n']
>>> Example: split_lowerstring(""Programming"")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']","import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","Write a function to split a string at lowercase letters.
>>> Example: split_lowerstring(""AbCd"")==['bC','d']
>>> Example: split_lowerstring(""Python"")==['y', 't', 'h', 'o', 'n']
>>> Example: split_lowerstring(""Programming"")==['r', 'o', 'g', 'r', 'a','m','m', 'i', 'n', 'g']
"
16,Write a function to find sequences of lowercase letters joined with an underscore.,"['assert text_lowercase_underscore(""aab_cbbbc"")==(\'Found a match!\')', 'assert text_lowercase_underscore(""aab_Abbbc"")==(\'Not matched!\')', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(\'Not matched!\')']","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_Abbbc"")==('Not matched!')
>>> Example: text_lowercase_underscore(""Aaab_abbbc"")==('Not matched!')","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","Write a function to find sequences of lowercase letters joined with an underscore.
>>> Example: text_lowercase_underscore(""aab_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""aab_Abbbc"")==('Not matched!')
>>> Example: text_lowercase_underscore(""Aaab_abbbc"")==('Not matched!')
>>> Example: text_lowercase_underscore(""Aaab_abbb_cbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""Aaab_abbb_cbbb_cccbbbc"")==('Found a match!')
>>> Example: text_lowercase_underscore(""Aaab_abbb_cbbb_cccbb_cccbcbc"")==('Not matched!')
>>> Example: text_lowercase_underscore(""Aaab_abbb_cbbb_cccbb_"
17,Write a function to find the perimeter of a square.,"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40
>>> Example: square_perimeter(5)==20
>>> Example: square_perimeter(4)==16","def square_perimeter(a):
  perimeter=4*a
  return perimeter","Write a function to find the perimeter of a square.
>>> Example: square_perimeter(10)==40
>>> Example: square_perimeter(5)==20
>>> Example: square_perimeter(4)==16
""""""

def square_perimeter(side"
18,Write a function to remove characters from the first string which are present in the second string.,"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\' ']","Write a function to remove characters from the first string which are present in the second string.
>>> Example: remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'
>>> Example: remove_dirty_chars(""digitalindia"", ""talent"") == 'digiidi'
>>> Example: remove_dirty_chars(""exoticmiles"", ""toxic"") == 'emles' ","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","Write a function to remove characters from the first string which are present in the second string.
>>> Example: remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'
>>> Example: remove_dirty_chars(""digitalindia"", ""talent"") == 'digiidi'
>>> Example: remove_dirty_chars(""exoticmiles"", ""toxic"") == 'emles' 

'''

def remove_dirty_chars(str1, str2):
    return ''.join(c for c in str1 if c not in str2)

print(remove_dirty_chars(""probasscurve"", ""pros""))
print(remove_dirty_chars(""digitalindia"", ""talent""))
print(remove_dirty_chars(""exoticmiles"", ""toxic""))
"
19,Write a function to find whether a given array of integers contains any duplicate element.,"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","Write a function to find whether a given array of integers contains any duplicate element.
>>> Example: test_duplicate(([1,2,3,4,5]))==False
>>> Example: test_duplicate(([1,2,3,4, 4]))==True
>>> Example: test_duplicate([1,1,2,2,3,3,4,4,5])==True","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","Write a function to find whether a given array of integers contains any duplicate element.
>>> Example: test_duplicate(([1,2,3,4,5]))==False
>>> Example: test_duplicate(([1,2,3,4, 4]))==True
>>> Example: test_duplicate([1,1,2,2,3,3,4,4,5])==True
>>> Example: test_duplicate([1,2,3,4,4])"
20,Write a function to check if the given number is woodball or not.,"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","Write a function to check if the given number is woodball or not.
>>> Example: is_woodall(383) == True
>>> Example: is_woodall(254) == False
>>> Example: is_woodall(200) == False","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","Write a function to check if the given number is woodball or not.
>>> Example: is_woodall(383) == True
>>> Example: is_woodall(254) == False
>>> Example: is_woodall(200) == False
>>> Example: is_woodall(100) == True
>>> Example: is_woodall(10) == False
>>> Example: is_woodall(1) == False
>>> Example: is_woodall(0) == False
>>> Example: is_woodall(8) == False
>>> Example: is_woodall(7) == False
>>> Example: is_woodall(6) == False
>>> Example: is_woodall(5) == False
>>> Example: is_woodall(4) == False
>>> Example: is_woodall(3) == False
>>> Example: is_woodall(2) == False
>>> Example: is"
21,Write a function to find m number of multiples of n.,"['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']","Write a function to find m number of multiples of n.
>>> Example: multiples_of_num(4,3)== [3,6,9,12]
>>> Example: multiples_of_num(2,5)== [5,10]
>>> Example: multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]","def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","Write a function to find m number of multiples of n.
>>> Example: multiples_of_num(4,3)== [3,6,9,12]
>>> Example: multiples_of_num(2,5)== [5,10]
>>> Example: multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]
>>> Example: multiples_of_num(10,2)== [2"
22,Write a function to find the first duplicate element in a given array of integers.,"['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']","Write a function to find the first duplicate element in a given array of integers.
>>> Example: find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
>>> Example: find_first_duplicate([1, 2, 3, 4])==-1
>>> Example: find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1","def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","Write a function to find the first duplicate element in a given array of integers.
>>> Example: find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
>>> Example: find_first_duplicate([1, 2, 3, 4])==-1
>>> Example: find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1
>>> Example: find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9])==-1
>>> Example: find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==-1
>>> Example: find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])==-1
>>> Example: find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])==-1
>>> Example: find_first_"
23,Write a python function to find the maximum sum of elements of list in a list of lists.,"['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']","Write a python function to find the maximum sum of elements of list in a list of lists.
>>> Example: maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
>>> Example: maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6
>>> Example: maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19","def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","Write a python function to find the maximum sum of elements of list in a list of lists.
>>> Example: maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
>>> Example: maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6
>>> Example: maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19
>>> Example: maximum_Sum([[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]]) == 35
>>> Example: maximum_Sum([[0,1,2,"
24,Write a function to convert the given binary number to its decimal equivalent.,"['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']","Write a function to convert the given binary number to its decimal equivalent.
>>> Example: binary_to_decimal(100) == 4
>>> Example: binary_to_decimal(1011) == 11
>>> Example: binary_to_decimal(1101101) == 109","def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","Write a function to convert the given binary number to its decimal equivalent.
>>> Example: binary_to_decimal(100) == 4
>>> Example: binary_to_decimal(1011) == 11
>>> Example: binary_to_decimal(1101101) == 109
""""""

def binary_to_decimal(binary):
    binary = str(binary)
    decimal = 0
    for i in range(len(binary)):
        decimal += int(binary[i]) * 2 ** (len(binary) - i - 1)
    return decimal

print(binary_to_decimal(100))
print(binary_to_decimal(1011))
print(binary_to_decimal(1101101))
"
25,Write a python function to find the product of non-repeated elements in a given array.,"['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']","Write a python function to find the product of non-repeated elements in a given array.
>>> Example: find_Product([1,1,2,3],4) == 6
>>> Example: find_Product([1,2,3,1,1],5) == 6
>>> Example: find_Product([1,1,4,5,6],5) == 120","def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","Write a python function to find the product of non-repeated elements in a given array.
>>> Example: find_Product([1,1,2,3],4) == 6
>>> Example: find_Product([1,2,3,1,1],5) == 6
>>> Example: find_Product([1,1,4,5,6],5) == 120
>>> Example: find_Product([1,2,3,1,1],4) == 6
>>> Example: find_Product([1,2,3,1,1],3) == 6
>>> Example: find_Product([1,2,3,1,1],2) == 6
>>> Example: find_Product([1,2,3,1,1],1) == 6
>>> Example: find"
26,Write a function to check if the given tuple list has all k elements.,"['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']","Write a function to check if the given tuple list has all k elements.
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
>>> Example: check_k_elements([(7, 7, 7), (7, 7)], 7) == True
>>> Example: check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False","def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","Write a function to check if the given tuple list has all k elements.
>>> Example: check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
>>> Example: check_k_elements([(7, 7, 7), (7, 7)], 7) == True
>>> Example: check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False
""""""

def check_k_elements(tuple_list, k):
    for i in tuple_list:
        if len(i"
27,Write a python function to remove all digits from a list of strings.,"[""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"", ""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"", ""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']""]","Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
>>> Example: remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
>>> Example: remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']","import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","Write a python function to remove all digits from a list of strings.
>>> Example: remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
>>> Example: remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
>>> Example: remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']
>>> Example: remove(['wonder1','wonder2','wonder3','wonder4"
